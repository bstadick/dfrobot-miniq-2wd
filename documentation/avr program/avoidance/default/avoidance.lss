
avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000310  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000090  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000048f  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018f  00000000  00000000  0000084f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f0  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000155  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000176  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 32 01 	call	0x264	; 0x264 <main>
  88:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pwm_init>:
int count= 0;

//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
  98:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
  9a:	10 92 6e 00 	sts	0x006E, r1
}
  9e:	08 95       	ret

000000a0 <Motor_Control>:
//控制电机转动
void Motor_Control(int M1_DIR,int M1_EN,int M2_DIR,int M2_EN)
{
  //////////M1////////////////////////
  if(M1_DIR==FORW)//M1电机方向  
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	11 f4       	brne	.+4      	; 0xa8 <Motor_Control+0x8>
    PORTD |=(1<<7);//设置向前
  a4:	5f 9a       	sbi	0x0b, 7	; 11
  a6:	01 c0       	rjmp	.+2      	; 0xaa <Motor_Control+0xa>
  else
    PORTD &=~(1<<7);//设置向后   
  a8:	5f 98       	cbi	0x0b, 7	; 11
  if(M1_EN==0)//M1电机速度 
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <Motor_Control+0x14>
	OCR0A = 0;//停止
  b0:	17 bc       	out	0x27, r1	; 39
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <Motor_Control+0x16>
  else
    OCR0A = M1_EN;//设置给定的数值
  b4:	67 bd       	out	0x27, r22	; 39

  ///////////M2//////////////////////
  if(M2_DIR==FORW)//M2电机的方向  
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	51 05       	cpc	r21, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <Motor_Control+0x20>
    PORTD |=(1<<4);//设置向前 
  bc:	5c 9a       	sbi	0x0b, 4	; 11
  be:	01 c0       	rjmp	.+2      	; 0xc2 <Motor_Control+0x22>
  else
    PORTD &=~(1<<4);//设置向后   
  c0:	5c 98       	cbi	0x0b, 4	; 11
  if(M2_EN==0) //M2电机的速度
  c2:	21 15       	cp	r18, r1
  c4:	31 05       	cpc	r19, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <Motor_Control+0x2c>
    OCR0B = 0;//停止
  c8:	18 bc       	out	0x28, r1	; 40
  ca:	08 95       	ret
  else
    OCR0B = M2_EN;//设置给定的数值
  cc:	28 bd       	out	0x28, r18	; 40
  ce:	08 95       	ret

000000d0 <L_Send>:
}
//左红外发射管发射频率为38khz脉冲
void L_Send(void)
{
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d4:	30 e4       	ldi	r19, 0x40	; 64
    int i;
	for(i=0;i<24;i++)
	{
    PORTB &=~(1<<1);//置低，导通
  d6:	29 98       	cbi	0x05, 1	; 5
  d8:	23 2f       	mov	r18, r19
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <L_Send+0xa>
	_delay_us(12);//延时
    PORTB |=(1<<1);//置高，截止
  de:	29 9a       	sbi	0x05, 1	; 5
  e0:	23 2f       	mov	r18, r19
  e2:	2a 95       	dec	r18
  e4:	f1 f7       	brne	.-4      	; 0xe2 <L_Send+0x12>
}
//左红外发射管发射频率为38khz脉冲
void L_Send(void)
{
    int i;
	for(i=0;i<24;i++)
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	88 31       	cpi	r24, 0x18	; 24
  ea:	91 05       	cpc	r25, r1
  ec:	a1 f7       	brne	.-24     	; 0xd6 <L_Send+0x6>
    PORTB &=~(1<<1);//置低，导通
	_delay_us(12);//延时
    PORTB |=(1<<1);//置高，截止
	_delay_us(12);//延时
	}
}
  ee:	08 95       	ret

000000f0 <R_Send>:
//右红外发射管发射频率为38khz脉冲
void R_Send(void)
{
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	30 e4       	ldi	r19, 0x40	; 64
    int i;
	for(i=0;i<24;i++)
	{
    PORTB &=~(1<<2);
  f6:	2a 98       	cbi	0x05, 2	; 5
  f8:	23 2f       	mov	r18, r19
  fa:	2a 95       	dec	r18
  fc:	f1 f7       	brne	.-4      	; 0xfa <R_Send+0xa>
	_delay_us(12);
    PORTB |=(1<<2);
  fe:	2a 9a       	sbi	0x05, 2	; 5
 100:	23 2f       	mov	r18, r19
 102:	2a 95       	dec	r18
 104:	f1 f7       	brne	.-4      	; 0x102 <R_Send+0x12>
}
//右红外发射管发射频率为38khz脉冲
void R_Send(void)
{
    int i;
	for(i=0;i<24;i++)
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	88 31       	cpi	r24, 0x18	; 24
 10a:	91 05       	cpc	r25, r1
 10c:	a1 f7       	brne	.-24     	; 0xf6 <R_Send+0x6>
    PORTB &=~(1<<2);
	_delay_us(12);
    PORTB |=(1<<2);
	_delay_us(12);
	}
}
 10e:	08 95       	ret

00000110 <pcint0_init>:
//引脚变化中断初始化函数
void pcint0_init(void)
{
	PCICR = 0X01;//使能第0组引脚变化中断
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = 0X01;//使能第0组的第0个引脚变化中断
 116:	80 93 6b 00 	sts	0x006B, r24
}
 11a:	08 95       	ret

0000011c <__vector_3>:
//引脚变化中断函数

ISR(PCINT0_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	count++;//对接收到的脉冲计数
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	90 93 01 01 	sts	0x0101, r25
 138:	80 93 00 01 	sts	0x0100, r24
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <Obstacle_Avoidance>:
//避障功能子函数
void Obstacle_Avoidance(void)
{
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
   char i,j;
   count=0;//计数清零
 14e:	10 92 01 01 	sts	0x0101, r1
 152:	10 92 00 01 	sts	0x0100, r1
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	05 e3       	ldi	r16, 0x35	; 53
   for(i=0;i<20;i++)//左管发射20个脉冲，会有40个中断
   {
     L_Send();
 15a:	0e 94 68 00 	call	0xd0	; 0xd0 <L_Send>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 2f       	mov	r25, r16
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <Obstacle_Avoidance+0x18>
     for(j=0;j<54;j++)
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	86 33       	cpi	r24, 0x36	; 54
 16a:	d1 f7       	brne	.-12     	; 0x160 <Obstacle_Avoidance+0x16>
//避障功能子函数
void Obstacle_Avoidance(void)
{
   char i,j;
   count=0;//计数清零
   for(i=0;i<20;i++)//左管发射20个脉冲，会有40个中断
 16c:	1f 5f       	subi	r17, 0xFF	; 255
 16e:	14 31       	cpi	r17, 0x14	; 20
 170:	a1 f7       	brne	.-24     	; 0x15a <Obstacle_Avoidance+0x10>
   {
     L_Send();
     for(j=0;j<54;j++)
	 _delay_us(10);
   }
   if(count>20)//接收到大于20个中断
 172:	80 91 00 01 	lds	r24, 0x0100
 176:	90 91 01 01 	lds	r25, 0x0101
 17a:	45 97       	sbiw	r24, 0x15	; 21
 17c:	3c f1       	brlt	.+78     	; 0x1cc <Obstacle_Avoidance+0x82>
   {
     Motor_Control(BACK,100,BACK,100);//后退
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	24 e6       	ldi	r18, 0x64	; 100
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 192:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 194:	40 e4       	ldi	r20, 0x40	; 64
 196:	5c e9       	ldi	r21, 0x9C	; 156
 198:	ca 01       	movw	r24, r20
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <Obstacle_Avoidance+0x50>
	 for(j=0;j<50;j++)//延时500ms
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	22 33       	cpi	r18, 0x32	; 50
 1a2:	d1 f7       	brne	.-12     	; 0x198 <Obstacle_Avoidance+0x4e>
	 _delay_ms(10);
     Motor_Control(BACK,100,FORW,100);//右转
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	64 e6       	ldi	r22, 0x64	; 100
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	24 e6       	ldi	r18, 0x64	; 100
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	40 e4       	ldi	r20, 0x40	; 64
 1bc:	5c e9       	ldi	r21, 0x9C	; 156
 1be:	ca 01       	movw	r24, r20
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <Obstacle_Avoidance+0x76>
	 for(j=0;j<50;j++)//延时500ms
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	22 33       	cpi	r18, 0x32	; 50
 1c8:	d1 f7       	brne	.-12     	; 0x1be <Obstacle_Avoidance+0x74>
 1ca:	49 c0       	rjmp	.+146    	; 0x25e <Obstacle_Avoidance+0x114>
	 _delay_ms(10);
   }
   else
   {
	   count=0;//清零
 1cc:	10 92 01 01 	sts	0x0101, r1
 1d0:	10 92 00 01 	sts	0x0100, r1
 1d4:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d6:	05 e3       	ldi	r16, 0x35	; 53
	   for(i=0;i<20;i++)//右发射管发射20个脉冲，会有40个中断
	   {
	     R_Send();
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <R_Send>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 2f       	mov	r25, r16
 1e0:	9a 95       	dec	r25
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Obstacle_Avoidance+0x96>
	     for(j=0;j<54;j++)
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	86 33       	cpi	r24, 0x36	; 54
 1e8:	d1 f7       	brne	.-12     	; 0x1de <Obstacle_Avoidance+0x94>
	 _delay_ms(10);
   }
   else
   {
	   count=0;//清零
	   for(i=0;i<20;i++)//右发射管发射20个脉冲，会有40个中断
 1ea:	1f 5f       	subi	r17, 0xFF	; 255
 1ec:	14 31       	cpi	r17, 0x14	; 20
 1ee:	a1 f7       	brne	.-24     	; 0x1d8 <Obstacle_Avoidance+0x8e>
	   {
	     R_Send();
	     for(j=0;j<54;j++)
		 _delay_us(10);
	   }
	   if(count>20)//接收到大于20个中断
 1f0:	80 91 00 01 	lds	r24, 0x0100
 1f4:	90 91 01 01 	lds	r25, 0x0101
 1f8:	45 97       	sbiw	r24, 0x15	; 21
 1fa:	3c f1       	brlt	.+78     	; 0x24a <Obstacle_Avoidance+0x100>
	   {
	     Motor_Control(BACK,100,BACK,100);//后退
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	24 e6       	ldi	r18, 0x64	; 100
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 210:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 212:	40 e4       	ldi	r20, 0x40	; 64
 214:	5c e9       	ldi	r21, 0x9C	; 156
 216:	ca 01       	movw	r24, r20
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <Obstacle_Avoidance+0xce>
		 for(j=0;j<50;j++)//延时
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	22 33       	cpi	r18, 0x32	; 50
 220:	d1 f7       	brne	.-12     	; 0x216 <Obstacle_Avoidance+0xcc>
		 _delay_ms(10);
	     Motor_Control(FORW,100,BACK,100);//左转
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	64 e6       	ldi	r22, 0x64	; 100
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	24 e6       	ldi	r18, 0x64	; 100
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	40 e4       	ldi	r20, 0x40	; 64
 23a:	5c e9       	ldi	r21, 0x9C	; 156
 23c:	ca 01       	movw	r24, r20
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <Obstacle_Avoidance+0xf4>
		 for(j=0;j<50;j++)//延时
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	22 33       	cpi	r18, 0x32	; 50
 246:	d1 f7       	brne	.-12     	; 0x23c <Obstacle_Avoidance+0xf2>
 248:	0a c0       	rjmp	.+20     	; 0x25e <Obstacle_Avoidance+0x114>
		 _delay_ms(10);
	   }
	   else
	   Motor_Control(FORW,100,FORW,100);//前进
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	64 e6       	ldi	r22, 0x64	; 100
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	24 e6       	ldi	r18, 0x64	; 100
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
   }
}
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <main>:

/*********************主函数********************************/
int main(void)
{

	DDRD = 0XF2;//PORTD引脚模式设置
 264:	82 ef       	ldi	r24, 0xF2	; 242
 266:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0XFE;//PORTB引脚模式设置
 268:	8e ef       	ldi	r24, 0xFE	; 254
 26a:	84 b9       	out	0x04, r24	; 4
	//设置输入引脚的上拉电阻有效
	PORTD |= ((1 << 0) | (1 << 2) | (1 << 3));
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	8d 60       	ori	r24, 0x0D	; 13
 270:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << 0);
 272:	28 9a       	sbi	0x05, 0	; 5
	//给两个红外发射管高电平，红外管截止
	PORTB |=(1<<1);
 274:	29 9a       	sbi	0x05, 1	; 5
    PORTB |=(1<<2);
 276:	2a 9a       	sbi	0x05, 2	; 5
int count= 0;

//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
 278:	83 ea       	ldi	r24, 0xA3	; 163
 27a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
 280:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
 282:	10 92 6e 00 	sts	0x006E, r1
	}
}
//引脚变化中断初始化函数
void pcint0_init(void)
{
	PCICR = 0X01;//使能第0组引脚变化中断
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = 0X01;//使能第0组的第0个引脚变化中断
 28c:	80 93 6b 00 	sts	0x006B, r24
	//给两个红外发射管高电平，红外管截止
	PORTB |=(1<<1);
    PORTB |=(1<<2);
	pwm_init();//pwm脉冲初始化
	pcint0_init();//外部中断初始化
	sei();//全局中断使能
 290:	78 94       	sei
	while (1)
	{
	    Obstacle_Avoidance();//避障子函数
 292:	0e 94 a5 00 	call	0x14a	; 0x14a <Obstacle_Avoidance>
 296:	fd cf       	rjmp	.-6      	; 0x292 <main+0x2e>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
