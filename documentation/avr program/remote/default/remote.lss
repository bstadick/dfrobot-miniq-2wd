
remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000003c0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001bd  00000000  00000000  00000487  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f5  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000338  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000100  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 01 	call	0x306	; 0x306 <main>
  88:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pwm_init>:
int  ir_code=0x00;   //命令值

//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
  98:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
  9a:	10 92 6e 00 	sts	0x006E, r1
}
  9e:	08 95       	ret

000000a0 <Motor_Control>:
//控制电机转动
void Motor_Control(int M1_DIR,int M1_EN,int M2_DIR,int M2_EN)
{
  //////////M1////////////////////////
  if(M1_DIR==FORW)//M1电机方向  
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	11 f4       	brne	.+4      	; 0xa8 <Motor_Control+0x8>
    PORTD |=(1<<7);//设置向前
  a4:	5f 9a       	sbi	0x0b, 7	; 11
  a6:	01 c0       	rjmp	.+2      	; 0xaa <Motor_Control+0xa>
  else
    PORTD &=~(1<<7);//设置向后   
  a8:	5f 98       	cbi	0x0b, 7	; 11
  if(M1_EN==0)//M1电机速度 
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <Motor_Control+0x14>
	OCR0A = 0;//停止
  b0:	17 bc       	out	0x27, r1	; 39
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <Motor_Control+0x16>
  else
    OCR0A = M1_EN;//设置给定的数值
  b4:	67 bd       	out	0x27, r22	; 39

  ///////////M2//////////////////////
  if(M2_DIR==FORW)//M2电机的方向  
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	51 05       	cpc	r21, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <Motor_Control+0x20>
    PORTD |=(1<<4);//设置向前 
  bc:	5c 9a       	sbi	0x0b, 4	; 11
  be:	01 c0       	rjmp	.+2      	; 0xc2 <Motor_Control+0x22>
  else
    PORTD &=~(1<<4);//设置向后   
  c0:	5c 98       	cbi	0x0b, 4	; 11
  if(M2_EN==0) //M2电机的速度
  c2:	21 15       	cp	r18, r1
  c4:	31 05       	cpc	r19, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <Motor_Control+0x2c>
    OCR0B = 0;//停止
  c8:	18 bc       	out	0x28, r1	; 40
  ca:	08 95       	ret
  else
    OCR0B = M2_EN;//设置给定的数值
  cc:	28 bd       	out	0x28, r18	; 40
  ce:	08 95       	ret

000000d0 <timer1_init>:
}
//设置定时器T1为定时模式
void timer1_init(void)
{
  TCCR1A = 0X00; 
  d0:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0X05;//给定时器时钟源  
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0X00;
  da:	10 92 82 00 	sts	0x0082, r1
  TCNT1 = 0X00;
  de:	10 92 85 00 	sts	0x0085, r1
  e2:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = 0X00;//禁止定时器溢出中断
  e6:	10 92 6f 00 	sts	0x006F, r1
}
  ea:	08 95       	ret

000000ec <remote_deal>:
//执行译码结果
void remote_deal(void)
{ 
  switch(ir_code)
  ec:	80 91 02 01 	lds	r24, 0x0102
  f0:	90 91 03 01 	lds	r25, 0x0103
  f4:	2b ef       	ldi	r18, 0xFB	; 251
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	92 07       	cpc	r25, r18
  fa:	31 f1       	breq	.+76     	; 0x148 <remote_deal+0x5c>
  fc:	2b ef       	ldi	r18, 0xFB	; 251
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	92 07       	cpc	r25, r18
 102:	44 f4       	brge	.+16     	; 0x114 <remote_deal+0x28>
 104:	26 ef       	ldi	r18, 0xF6	; 246
 106:	89 30       	cpi	r24, 0x09	; 9
 108:	92 07       	cpc	r25, r18
 10a:	d9 f0       	breq	.+54     	; 0x142 <remote_deal+0x56>
 10c:	86 50       	subi	r24, 0x06	; 6
 10e:	99 4f       	sbci	r25, 0xF9	; 249
 110:	81 f5       	brne	.+96     	; 0x172 <remote_deal+0x86>
 112:	25 c0       	rjmp	.+74     	; 0x15e <remote_deal+0x72>
 114:	2e ef       	ldi	r18, 0xFE	; 254
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	92 07       	cpc	r25, r18
 11a:	61 f0       	breq	.+24     	; 0x134 <remote_deal+0x48>
 11c:	80 50       	subi	r24, 0x00	; 0
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	41 f5       	brne	.+80     	; 0x172 <remote_deal+0x86>
  {
    case 0xff00://停止
       Motor_Control(FORW,0,FORW,0);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	12 c0       	rjmp	.+36     	; 0x158 <remote_deal+0x6c>
      break;
    case 0xfe01://前进
	   Motor_Control(FORW,100,FORW,100);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	64 e6       	ldi	r22, 0x64	; 100
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	09 c0       	rjmp	.+18     	; 0x154 <remote_deal+0x68>
       break;
    case 0xf609://后退
	   Motor_Control(BACK,100,BACK,100);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <remote_deal+0x60>
       break;
    case 0xfb04://左转
	   Motor_Control(FORW,100,BACK,100);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	64 e6       	ldi	r22, 0x64	; 100
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	24 e6       	ldi	r18, 0x64	; 100
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 15c:	08 95       	ret
       break;
    case 0xf906://右转
      Motor_Control(BACK,100,FORW,100);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	64 e6       	ldi	r22, 0x64	; 100
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	24 e6       	ldi	r18, 0x64	; 100
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	0e 94 50 00 	call	0xa0	; 0xa0 <Motor_Control>
 172:	08 95       	ret

00000174 <logic_value>:
  }
}
//逻辑‘0’和‘1’判断函数
char logic_value()
{
    while(!(PINB&0X01)); //低等待
 174:	18 9b       	sbis	0x03, 0	; 3
 176:	fe cf       	rjmp	.-4      	; 0x174 <logic_value>
     Pulse_Width=TCNT1;
 178:	80 91 84 00 	lds	r24, 0x0084
 17c:	90 91 85 00 	lds	r25, 0x0085
 180:	90 93 01 01 	sts	0x0101, r25
 184:	80 93 00 01 	sts	0x0100, r24
     TCNT1=0;
 188:	10 92 85 00 	sts	0x0085, r1
 18c:	10 92 84 00 	sts	0x0084, r1
     if(Pulse_Width>=7&&Pulse_Width<=10)//低电平560us
 190:	07 97       	sbiw	r24, 0x07	; 7
 192:	04 97       	sbiw	r24, 0x04	; 4
 194:	d8 f4       	brcc	.+54     	; 0x1cc <logic_value+0x58>
     {
         while(PINB&0X01);//是高就等待
 196:	18 99       	sbic	0x03, 0	; 3
 198:	fe cf       	rjmp	.-4      	; 0x196 <logic_value+0x22>
         Pulse_Width=TCNT1;
 19a:	20 91 84 00 	lds	r18, 0x0084
 19e:	30 91 85 00 	lds	r19, 0x0085
 1a2:	30 93 01 01 	sts	0x0101, r19
 1a6:	20 93 00 01 	sts	0x0100, r18
         TCNT1=0;
 1aa:	10 92 85 00 	sts	0x0085, r1
 1ae:	10 92 84 00 	sts	0x0084, r1
         if(Pulse_Width>=7&&Pulse_Width<=10)//接着高电平560us
 1b2:	c9 01       	movw	r24, r18
 1b4:	07 97       	sbiw	r24, 0x07	; 7
 1b6:	04 97       	sbiw	r24, 0x04	; 4
 1b8:	10 f4       	brcc	.+4      	; 0x1be <logic_value+0x4a>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
           return 0;
         else if(Pulse_Width>=25&&Pulse_Width<=27) //接着高电平1.7ms
 1be:	29 51       	subi	r18, 0x19	; 25
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	23 30       	cpi	r18, 0x03	; 3
 1c4:	31 05       	cpc	r19, r1
 1c6:	10 f4       	brcc	.+4      	; 0x1cc <logic_value+0x58>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
           return 1;
     }
     return -1;
}
 1ce:	08 95       	ret

000001d0 <pulse_deal>:
//接收地址码和命令码
void pulse_deal()
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
  int i;
  //地址码
  //执行8个0
  for(i=0; i<8; i++)
  {
    if(logic_value() != 0) //不是0
 1dc:	0e 94 ba 00 	call	0x174	; 0x174 <logic_value>
 1e0:	88 23       	and	r24, r24
 1e2:	b9 f5       	brne	.+110    	; 0x252 <pulse_deal+0x82>
void pulse_deal()
{
  int i;
  //地址码
  //执行8个0
  for(i=0; i<8; i++)
 1e4:	21 96       	adiw	r28, 0x01	; 1
 1e6:	c8 30       	cpi	r28, 0x08	; 8
 1e8:	d1 05       	cpc	r29, r1
 1ea:	c1 f7       	brne	.-16     	; 0x1dc <pulse_deal+0xc>
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
  }
  //地址反码
  //执行6个1
  for(i=0; i<6; i++)
  {
     if(logic_value()!= 1) //不是1
 1f0:	0e 94 ba 00 	call	0x174	; 0x174 <logic_value>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	69 f5       	brne	.+90     	; 0x252 <pulse_deal+0x82>
    if(logic_value() != 0) //不是0
      return;
  }
  //地址反码
  //执行6个1
  for(i=0; i<6; i++)
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	c6 30       	cpi	r28, 0x06	; 6
 1fc:	d1 05       	cpc	r29, r1
 1fe:	c1 f7       	brne	.-16     	; 0x1f0 <pulse_deal+0x20>
  {
     if(logic_value()!= 1) //不是1
      return;
  }
  //执行1个0
  if(logic_value()!= 0) //不是0
 200:	0e 94 ba 00 	call	0x174	; 0x174 <logic_value>
 204:	88 23       	and	r24, r24
 206:	29 f5       	brne	.+74     	; 0x252 <pulse_deal+0x82>
      return;
  //执行1个1
  if(logic_value()!= 1) //不是1
 208:	0e 94 ba 00 	call	0x174	; 0x174 <logic_value>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	09 f5       	brne	.+66     	; 0x252 <pulse_deal+0x82>
      return;
      
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
 210:	10 92 03 01 	sts	0x0103, r1
 214:	10 92 02 01 	sts	0x0102, r1
 218:	c0 e0       	ldi	r28, 0x00	; 0
 21a:	d0 e0       	ldi	r29, 0x00	; 0
  for(i=0; i<16;i++ )
  {
    if(logic_value() == 1)
    {
      ir_code |=(1<<i);
 21c:	01 e0       	ldi	r16, 0x01	; 1
 21e:	10 e0       	ldi	r17, 0x00	; 0
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
  for(i=0; i<16;i++ )
  {
    if(logic_value() == 1)
 220:	0e 94 ba 00 	call	0x174	; 0x174 <logic_value>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	89 f4       	brne	.+34     	; 0x24a <pulse_deal+0x7a>
    {
      ir_code |=(1<<i);
 228:	98 01       	movw	r18, r16
 22a:	0c 2e       	mov	r0, r28
 22c:	02 c0       	rjmp	.+4      	; 0x232 <pulse_deal+0x62>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <pulse_deal+0x5e>
 236:	80 91 02 01 	lds	r24, 0x0102
 23a:	90 91 03 01 	lds	r25, 0x0103
 23e:	82 2b       	or	r24, r18
 240:	93 2b       	or	r25, r19
 242:	90 93 03 01 	sts	0x0103, r25
 246:	80 93 02 01 	sts	0x0102, r24
      return;
      
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
  for(i=0; i<16;i++ )
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	c0 31       	cpi	r28, 0x10	; 16
 24e:	d1 05       	cpc	r29, r1
 250:	39 f7       	brne	.-50     	; 0x220 <pulse_deal+0x50>
    if(logic_value() == 1)
    {
      ir_code |=(1<<i);
    }
  }
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <remote_decode>:
//译码函数
void remote_decode(void)
{
     TCNT1=0X00;       
 25c:	10 92 85 00 	sts	0x0085, r1
 260:	10 92 84 00 	sts	0x0084, r1
 264:	0e c0       	rjmp	.+28     	; 0x282 <remote_decode+0x26>
     while(PINB&0X01)//是高就等待
     {
        if(TCNT1>=1563)  //当高电平持续时间超过100ms，表明此时没有按键按下
 266:	80 91 84 00 	lds	r24, 0x0084
 26a:	90 91 85 00 	lds	r25, 0x0085
 26e:	8b 51       	subi	r24, 0x1B	; 27
 270:	96 40       	sbci	r25, 0x06	; 6
 272:	38 f0       	brcs	.+14     	; 0x282 <remote_decode+0x26>
        {
             ir_code = 0xff00;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	90 93 03 01 	sts	0x0103, r25
 27c:	80 93 02 01 	sts	0x0102, r24
 280:	08 95       	ret
}
//译码函数
void remote_decode(void)
{
     TCNT1=0X00;       
     while(PINB&0X01)//是高就等待
 282:	18 99       	sbic	0x03, 0	; 3
 284:	f0 cf       	rjmp	.-32     	; 0x266 <remote_decode+0xa>
             return;
        }  
     }
     
     //如果高电平持续时间不超过100ms
     TCNT1=0X00;
 286:	10 92 85 00 	sts	0x0085, r1
 28a:	10 92 84 00 	sts	0x0084, r1
     
     while(!(PINB&0X01)); //低等待
 28e:	18 9b       	sbis	0x03, 0	; 3
 290:	fe cf       	rjmp	.-4      	; 0x28e <remote_decode+0x32>
     Pulse_Width=TCNT1;
 292:	80 91 84 00 	lds	r24, 0x0084
 296:	90 91 85 00 	lds	r25, 0x0085
 29a:	90 93 01 01 	sts	0x0101, r25
 29e:	80 93 00 01 	sts	0x0100, r24
     TCNT1=0;
 2a2:	10 92 85 00 	sts	0x0085, r1
 2a6:	10 92 84 00 	sts	0x0084, r1
     if(Pulse_Width>=140&&Pulse_Width<=141)//9ms
 2aa:	8c 58       	subi	r24, 0x8C	; 140
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	02 97       	sbiw	r24, 0x02	; 2
 2b0:	48 f5       	brcc	.+82     	; 0x304 <remote_decode+0xa8>
     {
         
         while(PINB&0X01);//是高就等待
 2b2:	18 99       	sbic	0x03, 0	; 3
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <remote_decode+0x56>
         Pulse_Width=TCNT1;
 2b6:	20 91 84 00 	lds	r18, 0x0084
 2ba:	30 91 85 00 	lds	r19, 0x0085
 2be:	30 93 01 01 	sts	0x0101, r19
 2c2:	20 93 00 01 	sts	0x0100, r18
         TCNT1=0;
 2c6:	10 92 85 00 	sts	0x0085, r1
 2ca:	10 92 84 00 	sts	0x0084, r1
         if(Pulse_Width>=68&&Pulse_Width<=72)//4.5ms
 2ce:	c9 01       	movw	r24, r18
 2d0:	84 54       	subi	r24, 0x44	; 68
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	05 97       	sbiw	r24, 0x05	; 5
 2d6:	18 f4       	brcc	.+6      	; 0x2de <remote_decode+0x82>
         {
            pulse_deal();
 2d8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <pulse_deal>
 2dc:	08 95       	ret
            return;
         }
         else if(Pulse_Width>=34&&Pulse_Width<=36)//2.25ms
 2de:	22 52       	subi	r18, 0x22	; 34
 2e0:	30 40       	sbci	r19, 0x00	; 0
 2e2:	23 30       	cpi	r18, 0x03	; 3
 2e4:	31 05       	cpc	r19, r1
 2e6:	70 f4       	brcc	.+28     	; 0x304 <remote_decode+0xa8>
         {
            while(!(PINB&0X01));//低等待
 2e8:	18 9b       	sbis	0x03, 0	; 3
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <remote_decode+0x8c>
            Pulse_Width=TCNT1;
 2ec:	80 91 84 00 	lds	r24, 0x0084
 2f0:	90 91 85 00 	lds	r25, 0x0085
 2f4:	90 93 01 01 	sts	0x0101, r25
 2f8:	80 93 00 01 	sts	0x0100, r24
            TCNT1=0;
 2fc:	10 92 85 00 	sts	0x0085, r1
 300:	10 92 84 00 	sts	0x0084, r1
 304:	08 95       	ret

00000306 <main>:
}
//主函数
int main(void)
{

	DDRD = 0XF2; //引脚配置
 306:	82 ef       	ldi	r24, 0xF2	; 242
 308:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0XFE;
 30a:	8e ef       	ldi	r24, 0xFE	; 254
 30c:	84 b9       	out	0x04, r24	; 4
	PORTD |= ((1 << 0) | (1 << 2) | (1 << 3)); //设置输入引脚的上拉电阻有效
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	8d 60       	ori	r24, 0x0D	; 13
 312:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << 0);
 314:	28 9a       	sbi	0x05, 0	; 5
int  ir_code=0x00;   //命令值

//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
 316:	83 ea       	ldi	r24, 0xA3	; 163
 318:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
 31e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
 320:	10 92 6e 00 	sts	0x006E, r1
    OCR0B = M2_EN;//设置给定的数值
}
//设置定时器T1为定时模式
void timer1_init(void)
{
  TCCR1A = 0X00; 
 324:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0X05;//给定时器时钟源  
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0X00;
 32e:	10 92 82 00 	sts	0x0082, r1
  TCNT1 = 0X00;
 332:	10 92 85 00 	sts	0x0085, r1
 336:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = 0X00;//禁止定时器溢出中断
 33a:	10 92 6f 00 	sts	0x006F, r1
	PORTB |= (1 << 0);
	pwm_init();
	timer1_init();
	while (1)
	{  
	  remote_decode();  //译码
 33e:	0e 94 2e 01 	call	0x25c	; 0x25c <remote_decode>
      remote_deal();   //执行译码结果
 342:	0e 94 76 00 	call	0xec	; 0xec <remote_deal>
 346:	fb cf       	rjmp	.-10     	; 0x33e <main+0x38>

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
