
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000240  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000135  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022f  00000000  00000000  0000059d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f4  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:


//pwm初始化函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;//快速PWM模式      
  80:	83 ea       	ldi	r24, 0xA3	; 163
  82:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
  88:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
  8a:	10 92 6e 00 	sts	0x006E, r1
}
  8e:	08 95       	ret

00000090 <Motor_Control>:
//控制电机转动
void Motor_Control(int M1_DIR,int M1_EN,int M2_DIR,int M2_EN)
{
  //////////M1////////////////////////
  if(M1_DIR==FORW)//M1电机方向  
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	11 f4       	brne	.+4      	; 0x98 <Motor_Control+0x8>
    PORTD |=(1<<7);//设置向前
  94:	5f 9a       	sbi	0x0b, 7	; 11
  96:	01 c0       	rjmp	.+2      	; 0x9a <Motor_Control+0xa>
  else
    PORTD &=~(1<<7);//设置向后   
  98:	5f 98       	cbi	0x0b, 7	; 11
  if(M1_EN==0)//M1电机速度 
  9a:	61 15       	cp	r22, r1
  9c:	71 05       	cpc	r23, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <Motor_Control+0x14>
	OCR0A = 0;//停止
  a0:	17 bc       	out	0x27, r1	; 39
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <Motor_Control+0x16>
  else
    OCR0A = M1_EN;//设置给定的数值
  a4:	67 bd       	out	0x27, r22	; 39

  ///////////M2//////////////////////
  if(M2_DIR==FORW)//M2电机的方向  
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	51 05       	cpc	r21, r1
  aa:	11 f4       	brne	.+4      	; 0xb0 <Motor_Control+0x20>
    PORTD |=(1<<4);//设置向前 
  ac:	5c 9a       	sbi	0x0b, 4	; 11
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <Motor_Control+0x22>
  else
    PORTD &=~(1<<4);//设置向后   
  b0:	5c 98       	cbi	0x0b, 4	; 11
  if(M2_EN==0) //M2电机的速度
  b2:	21 15       	cp	r18, r1
  b4:	31 05       	cpc	r19, r1
  b6:	11 f4       	brne	.+4      	; 0xbc <Motor_Control+0x2c>
    OCR0B = 0;//停止
  b8:	18 bc       	out	0x28, r1	; 40
  ba:	08 95       	ret
  else
    OCR0B = M2_EN;//设置给定的数值
  bc:	28 bd       	out	0x28, r18	; 40
  be:	08 95       	ret

000000c0 <main>:
}
//主函数
int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	DDRD |=(1<<4)|(1<<5)|(1<<6)|(1<<7);//设置PORTD端口的4、5、6、7引脚为输出模式
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 6f       	ori	r24, 0xF0	; 240
  c8:	8a b9       	out	0x0a, r24	; 10


//pwm初始化函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;//快速PWM模式      
  ca:	83 ea       	ldi	r24, 0xA3	; 163
  cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
  d2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
  d4:	10 92 6e 00 	sts	0x006E, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	c0 e4       	ldi	r28, 0x40	; 64
  da:	dc e9       	ldi	r29, 0x9C	; 156
	DDRD |=(1<<4)|(1<<5)|(1<<6)|(1<<7);//设置PORTD端口的4、5、6、7引脚为输出模式
	pwm_init();//pwm初始化
	while(1)
	{
	   int i;
	   Motor_Control(FORW,80,FORW,80);//前进
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	60 e5       	ldi	r22, 0x50	; 80
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	20 e5       	ldi	r18, 0x50	; 80
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	0e 94 48 00 	call	0x90	; 0x90 <Motor_Control>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fe 01       	movw	r30, r28
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x36>
       for(i=0;i<50;i++)//延时
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	82 33       	cpi	r24, 0x32	; 50
  fe:	91 05       	cpc	r25, r1
 100:	c9 f7       	brne	.-14     	; 0xf4 <main+0x34>
	   _delay_ms(10);
       Motor_Control(BACK,0,BACK,0);//停止
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	0e 94 48 00 	call	0x90	; 0x90 <Motor_Control>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fe 01       	movw	r30, r28
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x5c>
       for(i=0;i<50;i++)//延时
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	82 33       	cpi	r24, 0x32	; 50
 124:	91 05       	cpc	r25, r1
 126:	c9 f7       	brne	.-14     	; 0x11a <main+0x5a>
	   _delay_ms(10);
       Motor_Control(BACK,80,BACK,80);//后退
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	60 e5       	ldi	r22, 0x50	; 80
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	20 e5       	ldi	r18, 0x50	; 80
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	0e 94 48 00 	call	0x90	; 0x90 <Motor_Control>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fe 01       	movw	r30, r28
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x82>
	   for(i=0;i<50;i++)//延时
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	82 33       	cpi	r24, 0x32	; 50
 14a:	91 05       	cpc	r25, r1
 14c:	c9 f7       	brne	.-14     	; 0x140 <main+0x80>
	   _delay_ms(10);
       Motor_Control(BACK,0,BACK,0);//停止
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	0e 94 48 00 	call	0x90	; 0x90 <Motor_Control>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fe 01       	movw	r30, r28
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xa8>
       for(i=0;i<50;i++)//延时
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	82 33       	cpi	r24, 0x32	; 50
 170:	91 05       	cpc	r25, r1
 172:	c9 f7       	brne	.-14     	; 0x166 <main+0xa6>
 174:	b3 cf       	rjmp	.-154    	; 0xdc <main+0x1c>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
