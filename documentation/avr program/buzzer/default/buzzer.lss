
buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a9  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e4  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000171  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c1  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  00000639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    char i;
    DDRB = (1<<3);//设置PORTB端口的PB3引脚为输出模式
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	84 b9       	out	0x04, r24	; 4
  84:	20 e0       	ldi	r18, 0x00	; 0
	      _delay_ms(1);//延时
	    }
	    //输出另一个频率的声音
	    for(i=0;i<100;i++)
	    {
	      PORTB = (1<<3);//设置PB3引脚为高电平，蜂鸣器响
  86:	38 e0       	ldi	r19, 0x08	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	60 e4       	ldi	r22, 0x40	; 64
  8a:	7f e1       	ldi	r23, 0x1F	; 31
	while(1)
	{
		//输出一个频率的声音
	    for(i=0;i<80;i++)
	    {
	      PORTB |=(1<<3);//设置PB3引脚为高电平，蜂鸣器响
  8c:	40 ea       	ldi	r20, 0xA0	; 160
  8e:	5f e0       	ldi	r21, 0x0F	; 15
  90:	09 c0       	rjmp	.+18     	; 0xa4 <main+0x24>
  92:	2b 9a       	sbi	0x05, 3	; 5
  94:	ca 01       	movw	r24, r20
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x16>
	      _delay_ms(1);//延时
	      PORTB &= ~(1<<3);//设置PB3引脚为低电平，蜂鸣器不响
  9a:	2b 98       	cbi	0x05, 3	; 5
  9c:	ca 01       	movw	r24, r20
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x1e>
    DDRB = (1<<3);//设置PORTB端口的PB3引脚为输出模式

	while(1)
	{
		//输出一个频率的声音
	    for(i=0;i<80;i++)
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	20 35       	cpi	r18, 0x50	; 80
  a6:	a8 f3       	brcs	.-22     	; 0x92 <main+0x12>
  a8:	20 e0       	ldi	r18, 0x00	; 0
	      _delay_ms(1);//延时
	    }
	    //输出另一个频率的声音
	    for(i=0;i<100;i++)
	    {
	      PORTB = (1<<3);//设置PB3引脚为高电平，蜂鸣器响
  aa:	35 b9       	out	0x05, r19	; 5
  ac:	cb 01       	movw	r24, r22
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
	      _delay_ms(2);//延时
	      PORTB &= ~(1<<3);//设置PB3引脚为低电平，蜂鸣器不响
  b2:	2b 98       	cbi	0x05, 3	; 5
  b4:	cb 01       	movw	r24, r22
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x36>
	      _delay_ms(1);//延时
	      PORTB &= ~(1<<3);//设置PB3引脚为低电平，蜂鸣器不响
	      _delay_ms(1);//延时
	    }
	    //输出另一个频率的声音
	    for(i=0;i<100;i++)
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	24 36       	cpi	r18, 0x64	; 100
  be:	a9 f7       	brne	.-22     	; 0xaa <main+0x2a>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	e7 cf       	rjmp	.-50     	; 0x92 <main+0x12>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
