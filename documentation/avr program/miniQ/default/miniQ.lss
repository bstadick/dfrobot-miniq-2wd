
miniQ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00001ec4  00001f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080022a  0080022a  00002082  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000382  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002756  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001378  00000000  00000000  00004cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a13  00000000  00000000  00006052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00007a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049d  00000000  00000000  00007d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7b  00000000  00000000  000081e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00008d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 34       	cpi	r26, 0x40	; 64
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0d 09 	call	0x121a	; 0x121a <main>
      9e:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pwm_init>:
int    Pulse_Width=0;//存储脉宽 
int    ir_code=0x00;   //命令值
//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
      a6:	83 ea       	ldi	r24, 0xA3	; 163
      a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
      aa:	83 e0       	ldi	r24, 0x03	; 3
      ac:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
      ae:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
      b0:	10 92 6e 00 	sts	0x006E, r1
}
      b4:	08 95       	ret

000000b6 <Motor_Control>:
//控制电机转动
void Motor_Control(int M1_DIR,int M1_EN,int M2_DIR,int M2_EN)
{
  //////////M1////////////////////////
  if(M1_DIR==FORW)//M1电机方向  
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	11 f4       	brne	.+4      	; 0xbe <Motor_Control+0x8>
    PORTD |=(1<<7);//设置向前
      ba:	5f 9a       	sbi	0x0b, 7	; 11
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <Motor_Control+0xa>
  else
    PORTD &=~(1<<7);//设置向后   
      be:	5f 98       	cbi	0x0b, 7	; 11
  if(M1_EN==0)//M1电机速度 
      c0:	61 15       	cp	r22, r1
      c2:	71 05       	cpc	r23, r1
      c4:	11 f4       	brne	.+4      	; 0xca <Motor_Control+0x14>
	OCR0A = 0;//停止
      c6:	17 bc       	out	0x27, r1	; 39
      c8:	01 c0       	rjmp	.+2      	; 0xcc <Motor_Control+0x16>
  else
    OCR0A = M1_EN;//设置给定的数值
      ca:	67 bd       	out	0x27, r22	; 39

  ///////////M2//////////////////////
  if(M2_DIR==FORW)//M2电机的方向  
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	51 05       	cpc	r21, r1
      d0:	11 f4       	brne	.+4      	; 0xd6 <Motor_Control+0x20>
    PORTD |=(1<<4);//设置向前 
      d2:	5c 9a       	sbi	0x0b, 4	; 11
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <Motor_Control+0x22>
  else
    PORTD &=~(1<<4);//设置向后   
      d6:	5c 98       	cbi	0x0b, 4	; 11
  if(M2_EN==0) //M2电机的速度
      d8:	21 15       	cp	r18, r1
      da:	31 05       	cpc	r19, r1
      dc:	11 f4       	brne	.+4      	; 0xe2 <Motor_Control+0x2c>
    OCR0B = 0;//停止
      de:	18 bc       	out	0x28, r1	; 40
      e0:	08 95       	ret
  else
    OCR0B = M2_EN;//设置给定的数值
      e2:	28 bd       	out	0x28, r18	; 40
      e4:	08 95       	ret

000000e6 <adc_init>:
}
//ad转换初始化函数
void adc_init(int channel)
{
    //设置ad转换寄存器
	ADMUX =channel;
      e6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =0xcb; 
      ea:	8b ec       	ldi	r24, 0xCB	; 203
      ec:	80 93 7a 00 	sts	0x007A, r24
}
      f0:	08 95       	ret

000000f2 <__vector_21>:
//ad转换中断函数
ISR(ADC_vect)
{
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	2f 93       	push	r18
     108:	3f 93       	push	r19
     10a:	4f 93       	push	r20
     10c:	5f 93       	push	r21
     10e:	6f 93       	push	r22
     110:	7f 93       	push	r23
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
     116:	af 93       	push	r26
     118:	bf 93       	push	r27
     11a:	ef 93       	push	r30
     11c:	ff 93       	push	r31
   ADCSRA &=~ (1<<ADEN);      //关中断
     11e:	80 91 7a 00 	lds	r24, 0x007A
     122:	8f 77       	andi	r24, 0x7F	; 127
     124:	80 93 7a 00 	sts	0x007A, r24
   data_ = ADCL;               //接收第八位值
     128:	60 91 78 00 	lds	r22, 0x0078
   data_  = data_+ADCH*256;    //整个adc的数字值
     12c:	d0 90 79 00 	lds	r13, 0x0079
   data_  = ((data_*Vr)/1024); //转换成模拟值
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__floatunsisf>
     13a:	7b 01       	movw	r14, r22
     13c:	8c 01       	movw	r16, r24
     13e:	7d 2d       	mov	r23, r13
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	88 27       	eor	r24, r24
     144:	77 fd       	sbrc	r23, 7
     146:	80 95       	com	r24
     148:	98 2f       	mov	r25, r24
     14a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     14e:	9b 01       	movw	r18, r22
     150:	ac 01       	movw	r20, r24
     152:	c8 01       	movw	r24, r16
     154:	b7 01       	movw	r22, r14
     156:	0e 94 a6 0a 	call	0x154c	; 0x154c <__addsf3>
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 ea       	ldi	r20, 0xA0	; 160
     160:	50 e4       	ldi	r21, 0x40	; 64
     162:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e8       	ldi	r20, 0x80	; 128
     16c:	5a e3       	ldi	r21, 0x3A	; 58
     16e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     172:	7b 01       	movw	r14, r22
     174:	8c 01       	movw	r16, r24
     176:	cb 01       	movw	r24, r22
     178:	d8 01       	movw	r26, r16
     17a:	80 93 3c 02 	sts	0x023C, r24
     17e:	90 93 3d 02 	sts	0x023D, r25
     182:	a0 93 3e 02 	sts	0x023E, r26
     186:	b0 93 3f 02 	sts	0x023F, r27
   switch(ADMUX)
     18a:	80 91 7c 00 	lds	r24, 0x007C
     18e:	84 34       	cpi	r24, 0x44	; 68
     190:	09 f4       	brne	.+2      	; 0x194 <__vector_21+0xa2>
     192:	41 c0       	rjmp	.+130    	; 0x216 <__vector_21+0x124>
     194:	85 34       	cpi	r24, 0x45	; 69
     196:	50 f4       	brcc	.+20     	; 0x1ac <__vector_21+0xba>
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	39 f1       	breq	.+78     	; 0x1ea <__vector_21+0xf8>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	80 f5       	brcc	.+96     	; 0x200 <__vector_21+0x10e>
     1a0:	80 34       	cpi	r24, 0x40	; 64
     1a2:	69 f0       	breq	.+26     	; 0x1be <__vector_21+0xcc>
     1a4:	81 34       	cpi	r24, 0x41	; 65
     1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_21+0xb8>
     1a8:	61 c0       	rjmp	.+194    	; 0x26c <__vector_21+0x17a>
     1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <__vector_21+0xe2>
     1ac:	86 34       	cpi	r24, 0x46	; 70
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__vector_21+0xc0>
     1b0:	48 c0       	rjmp	.+144    	; 0x242 <__vector_21+0x150>
     1b2:	86 34       	cpi	r24, 0x46	; 70
     1b4:	d8 f1       	brcs	.+118    	; 0x22c <__vector_21+0x13a>
     1b6:	87 34       	cpi	r24, 0x47	; 71
     1b8:	09 f0       	breq	.+2      	; 0x1bc <__vector_21+0xca>
     1ba:	58 c0       	rjmp	.+176    	; 0x26c <__vector_21+0x17a>
     1bc:	4d c0       	rjmp	.+154    	; 0x258 <__vector_21+0x166>
   {
        case 0x40:
		          data[0] = data_;
     1be:	c7 01       	movw	r24, r14
     1c0:	d8 01       	movw	r26, r16
     1c2:	80 93 00 01 	sts	0x0100, r24
     1c6:	90 93 01 01 	sts	0x0101, r25
     1ca:	a0 93 02 01 	sts	0x0102, r26
     1ce:	b0 93 03 01 	sts	0x0103, r27
     1d2:	4c c0       	rjmp	.+152    	; 0x26c <__vector_21+0x17a>
				  break;
	    case 0x41:
		          data[1] = data_;
     1d4:	c7 01       	movw	r24, r14
     1d6:	d8 01       	movw	r26, r16
     1d8:	80 93 04 01 	sts	0x0104, r24
     1dc:	90 93 05 01 	sts	0x0105, r25
     1e0:	a0 93 06 01 	sts	0x0106, r26
     1e4:	b0 93 07 01 	sts	0x0107, r27
     1e8:	41 c0       	rjmp	.+130    	; 0x26c <__vector_21+0x17a>
				  break;
	    case 0x42:
		          data[2] = data_;
     1ea:	c7 01       	movw	r24, r14
     1ec:	d8 01       	movw	r26, r16
     1ee:	80 93 08 01 	sts	0x0108, r24
     1f2:	90 93 09 01 	sts	0x0109, r25
     1f6:	a0 93 0a 01 	sts	0x010A, r26
     1fa:	b0 93 0b 01 	sts	0x010B, r27
     1fe:	36 c0       	rjmp	.+108    	; 0x26c <__vector_21+0x17a>
				  break;
	    case 0x43:
		          data[3] = data_;
     200:	c7 01       	movw	r24, r14
     202:	d8 01       	movw	r26, r16
     204:	80 93 0c 01 	sts	0x010C, r24
     208:	90 93 0d 01 	sts	0x010D, r25
     20c:	a0 93 0e 01 	sts	0x010E, r26
     210:	b0 93 0f 01 	sts	0x010F, r27
     214:	2b c0       	rjmp	.+86     	; 0x26c <__vector_21+0x17a>
				  break;
		case 0x44:
		          data[4] = data_;
     216:	c7 01       	movw	r24, r14
     218:	d8 01       	movw	r26, r16
     21a:	80 93 10 01 	sts	0x0110, r24
     21e:	90 93 11 01 	sts	0x0111, r25
     222:	a0 93 12 01 	sts	0x0112, r26
     226:	b0 93 13 01 	sts	0x0113, r27
     22a:	20 c0       	rjmp	.+64     	; 0x26c <__vector_21+0x17a>
				  break;
		case 0x45:
		          data[5] = data_; 
     22c:	c7 01       	movw	r24, r14
     22e:	d8 01       	movw	r26, r16
     230:	80 93 14 01 	sts	0x0114, r24
     234:	90 93 15 01 	sts	0x0115, r25
     238:	a0 93 16 01 	sts	0x0116, r26
     23c:	b0 93 17 01 	sts	0x0117, r27
     240:	15 c0       	rjmp	.+42     	; 0x26c <__vector_21+0x17a>
				  break;
		case 0x46:
		          data[6] = data_;
     242:	c7 01       	movw	r24, r14
     244:	d8 01       	movw	r26, r16
     246:	80 93 18 01 	sts	0x0118, r24
     24a:	90 93 19 01 	sts	0x0119, r25
     24e:	a0 93 1a 01 	sts	0x011A, r26
     252:	b0 93 1b 01 	sts	0x011B, r27
     256:	0a c0       	rjmp	.+20     	; 0x26c <__vector_21+0x17a>
				  break;
		case 0x47:
		          data[7] = data_;
     258:	c7 01       	movw	r24, r14
     25a:	d8 01       	movw	r26, r16
     25c:	80 93 1c 01 	sts	0x011C, r24
     260:	90 93 1d 01 	sts	0x011D, r25
     264:	a0 93 1e 01 	sts	0x011E, r26
     268:	b0 93 1f 01 	sts	0x011F, r27
				  break;
   }
   if(++channel==0x48)//换通道
     26c:	80 91 20 01 	lds	r24, 0x0120
     270:	8f 5f       	subi	r24, 0xFF	; 255
     272:	80 93 20 01 	sts	0x0120, r24
     276:	88 34       	cpi	r24, 0x48	; 72
     278:	19 f4       	brne	.+6      	; 0x280 <__vector_21+0x18e>
   	{
   		  channel = 0x40;
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	80 93 20 01 	sts	0x0120, r24
   	}
    adc_init(channel);//重新初始化
     280:	80 91 20 01 	lds	r24, 0x0120
}
//ad转换初始化函数
void adc_init(int channel)
{
    //设置ad转换寄存器
	ADMUX =channel;
     284:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =0xcb; 
     288:	8b ec       	ldi	r24, 0xCB	; 203
     28a:	80 93 7a 00 	sts	0x007A, r24
   if(++channel==0x48)//换通道
   	{
   		  channel = 0x40;
   	}
    adc_init(channel);//重新初始化
}
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <L_Send>:
//左红外发射管发射频率为38khz脉冲
void L_Send(void)
{
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2be:	30 e4       	ldi	r19, 0x40	; 64
    int i;
	for(i=0;i<24;i++)
	{
    PORTB &=~(1<<1);//置低，导通
     2c0:	29 98       	cbi	0x05, 1	; 5
     2c2:	23 2f       	mov	r18, r19
     2c4:	2a 95       	dec	r18
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <L_Send+0xa>
	_delay_us(12);//延时
    PORTB |=(1<<1);//置高，截止
     2c8:	29 9a       	sbi	0x05, 1	; 5
     2ca:	23 2f       	mov	r18, r19
     2cc:	2a 95       	dec	r18
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <L_Send+0x12>
}
//左红外发射管发射频率为38khz脉冲
void L_Send(void)
{
    int i;
	for(i=0;i<24;i++)
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	88 31       	cpi	r24, 0x18	; 24
     2d4:	91 05       	cpc	r25, r1
     2d6:	a1 f7       	brne	.-24     	; 0x2c0 <L_Send+0x6>
    PORTB &=~(1<<1);//置低，导通
	_delay_us(12);//延时
    PORTB |=(1<<1);//置高，截止
	_delay_us(12);//延时
	}
}
     2d8:	08 95       	ret

000002da <R_Send>:
//右红外发射管发射频率为38khz脉冲
void R_Send(void)
{
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	30 e4       	ldi	r19, 0x40	; 64
    int i;
	for(i=0;i<24;i++)
	{
    PORTB &=~(1<<2);
     2e0:	2a 98       	cbi	0x05, 2	; 5
     2e2:	23 2f       	mov	r18, r19
     2e4:	2a 95       	dec	r18
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <R_Send+0xa>
	_delay_us(12);
    PORTB |=(1<<2);
     2e8:	2a 9a       	sbi	0x05, 2	; 5
     2ea:	23 2f       	mov	r18, r19
     2ec:	2a 95       	dec	r18
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <R_Send+0x12>
}
//右红外发射管发射频率为38khz脉冲
void R_Send(void)
{
    int i;
	for(i=0;i<24;i++)
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	88 31       	cpi	r24, 0x18	; 24
     2f4:	91 05       	cpc	r25, r1
     2f6:	a1 f7       	brne	.-24     	; 0x2e0 <R_Send+0x6>
    PORTB &=~(1<<2);
	_delay_us(12);
    PORTB |=(1<<2);
	_delay_us(12);
	}
}
     2f8:	08 95       	ret

000002fa <pcint0_init>:
//引脚变化中断初始化函数
void pcint0_init(void)
{
	PCICR = 0X01;//使能第0组引脚变化中断
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = 0X01;//使能第0组的第0个引脚变化中断
     300:	80 93 6b 00 	sts	0x006B, r24
}
     304:	08 95       	ret

00000306 <__vector_3>:
//引脚变化中断函数

ISR(PCINT0_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
	count++;//对接收到的脉冲计数
     314:	80 91 32 02 	lds	r24, 0x0232
     318:	90 91 33 02 	lds	r25, 0x0233
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	90 93 33 02 	sts	0x0233, r25
     322:	80 93 32 02 	sts	0x0232, r24
}
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <Obstacle_Avoidance>:
//避障功能子函数
void Obstacle_Avoidance(void)
{
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
   char i,j;
   count=0;//计数清零
     338:	10 92 33 02 	sts	0x0233, r1
     33c:	10 92 32 02 	sts	0x0232, r1
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	05 e3       	ldi	r16, 0x35	; 53
   for(i=0;i<20;i++)//左管发射20个脉冲，会有40个中断
   {
     L_Send();
     344:	0e 94 5d 01 	call	0x2ba	; 0x2ba <L_Send>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 2f       	mov	r25, r16
     34c:	9a 95       	dec	r25
     34e:	f1 f7       	brne	.-4      	; 0x34c <Obstacle_Avoidance+0x18>
     for(j=0;j<54;j++)
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	86 33       	cpi	r24, 0x36	; 54
     354:	d1 f7       	brne	.-12     	; 0x34a <Obstacle_Avoidance+0x16>
//避障功能子函数
void Obstacle_Avoidance(void)
{
   char i,j;
   count=0;//计数清零
   for(i=0;i<20;i++)//左管发射20个脉冲，会有40个中断
     356:	1f 5f       	subi	r17, 0xFF	; 255
     358:	14 31       	cpi	r17, 0x14	; 20
     35a:	a1 f7       	brne	.-24     	; 0x344 <Obstacle_Avoidance+0x10>
   {
     L_Send();
     for(j=0;j<54;j++)
	 _delay_us(10);
   }
   if(count>20)//接收到大于20个中断
     35c:	80 91 32 02 	lds	r24, 0x0232
     360:	90 91 33 02 	lds	r25, 0x0233
     364:	45 97       	sbiw	r24, 0x15	; 21
     366:	0c f4       	brge	.+2      	; 0x36a <Obstacle_Avoidance+0x36>
     368:	47 c0       	rjmp	.+142    	; 0x3f8 <Obstacle_Avoidance+0xc4>
   {
     if(key_2==1||key_3==3)//避障行为或者小鸡行为
     36a:	80 91 2b 02 	lds	r24, 0x022B
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	21 f0       	breq	.+8      	; 0x37a <Obstacle_Avoidance+0x46>
     372:	80 91 2c 02 	lds	r24, 0x022C
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	31 f5       	brne	.+76     	; 0x3c6 <Obstacle_Avoidance+0x92>
	 {
     Motor_Control(BACK,100,BACK,100);//后退
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	64 e6       	ldi	r22, 0x64	; 100
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	24 e6       	ldi	r18, 0x64	; 100
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     38e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     390:	40 e4       	ldi	r20, 0x40	; 64
     392:	5c e9       	ldi	r21, 0x9C	; 156
     394:	ca 01       	movw	r24, r20
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <Obstacle_Avoidance+0x62>
	 for(j=0;j<50;j++)//延时500ms
     39a:	2f 5f       	subi	r18, 0xFF	; 255
     39c:	22 33       	cpi	r18, 0x32	; 50
     39e:	d1 f7       	brne	.-12     	; 0x394 <Obstacle_Avoidance+0x60>
	 _delay_ms(10);
     Motor_Control(BACK,100,FORW,100);//右转
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	64 e6       	ldi	r22, 0x64	; 100
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	24 e6       	ldi	r18, 0x64	; 100
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	40 e4       	ldi	r20, 0x40	; 64
     3b8:	5c e9       	ldi	r21, 0x9C	; 156
     3ba:	ca 01       	movw	r24, r20
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <Obstacle_Avoidance+0x88>
	 for(j=0;j<50;j++)//延时500ms
     3c0:	2f 5f       	subi	r18, 0xFF	; 255
     3c2:	22 33       	cpi	r18, 0x32	; 50
     3c4:	d1 f7       	brne	.-12     	; 0x3ba <Obstacle_Avoidance+0x86>
	 _delay_ms(10);
	 }
	 if(key_3==1)//袭击者模式
     3c6:	80 91 2c 02 	lds	r24, 0x022C
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <Obstacle_Avoidance+0x9c>
     3ce:	91 c0       	rjmp	.+290    	; 0x4f2 <Obstacle_Avoidance+0x1be>
     {
      Motor_Control(FORW,100,FORW,100);//前进
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	64 e6       	ldi	r22, 0x64	; 100
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	24 e6       	ldi	r18, 0x64	; 100
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	40 e4       	ldi	r20, 0x40	; 64
     3e8:	5c e9       	ldi	r21, 0x9C	; 156
     3ea:	ca 01       	movw	r24, r20
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <Obstacle_Avoidance+0xb8>
	  for(j=0;j<30;j++)//延时
     3f0:	2f 5f       	subi	r18, 0xFF	; 255
     3f2:	2e 31       	cpi	r18, 0x1E	; 30
     3f4:	d1 f7       	brne	.-12     	; 0x3ea <Obstacle_Avoidance+0xb6>
     3f6:	7d c0       	rjmp	.+250    	; 0x4f2 <Obstacle_Avoidance+0x1be>
      _delay_ms(10);//延时
     }
   }
   else
   {
	   count=0;//清零
     3f8:	10 92 33 02 	sts	0x0233, r1
     3fc:	10 92 32 02 	sts	0x0232, r1
     400:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     402:	05 e3       	ldi	r16, 0x35	; 53
	   for(i=0;i<20;i++)//右发射管发射20个脉冲，会有40个中断
	   {
	     R_Send();
     404:	0e 94 6d 01 	call	0x2da	; 0x2da <R_Send>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 2f       	mov	r25, r16
     40c:	9a 95       	dec	r25
     40e:	f1 f7       	brne	.-4      	; 0x40c <Obstacle_Avoidance+0xd8>
	     for(j=0;j<54;j++)
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	86 33       	cpi	r24, 0x36	; 54
     414:	d1 f7       	brne	.-12     	; 0x40a <Obstacle_Avoidance+0xd6>
     }
   }
   else
   {
	   count=0;//清零
	   for(i=0;i<20;i++)//右发射管发射20个脉冲，会有40个中断
     416:	1f 5f       	subi	r17, 0xFF	; 255
     418:	14 31       	cpi	r17, 0x14	; 20
     41a:	a1 f7       	brne	.-24     	; 0x404 <Obstacle_Avoidance+0xd0>
	   {
	     R_Send();
	     for(j=0;j<54;j++)
		 _delay_us(10);
	   }
	   if(count>20)//接收到大于20个中断
     41c:	80 91 32 02 	lds	r24, 0x0232
     420:	90 91 33 02 	lds	r25, 0x0233
     424:	20 91 2b 02 	lds	r18, 0x022B
     428:	45 97       	sbiw	r24, 0x15	; 21
     42a:	0c f4       	brge	.+2      	; 0x42e <Obstacle_Avoidance+0xfa>
     42c:	44 c0       	rjmp	.+136    	; 0x4b6 <Obstacle_Avoidance+0x182>
	   {
	     if(key_2==1||key_3==3)//避障行为或者小鸡行为
     42e:	21 30       	cpi	r18, 0x01	; 1
     430:	21 f0       	breq	.+8      	; 0x43a <Obstacle_Avoidance+0x106>
     432:	80 91 2c 02 	lds	r24, 0x022C
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	31 f5       	brne	.+76     	; 0x486 <Obstacle_Avoidance+0x152>
		 {
	     Motor_Control(BACK,100,BACK,100);//后退
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	64 e6       	ldi	r22, 0x64	; 100
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	24 e6       	ldi	r18, 0x64	; 100
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     44e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     450:	40 e4       	ldi	r20, 0x40	; 64
     452:	5c e9       	ldi	r21, 0x9C	; 156
     454:	ca 01       	movw	r24, r20
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <Obstacle_Avoidance+0x122>
		 for(j=0;j<50;j++)//延时
     45a:	2f 5f       	subi	r18, 0xFF	; 255
     45c:	22 33       	cpi	r18, 0x32	; 50
     45e:	d1 f7       	brne	.-12     	; 0x454 <Obstacle_Avoidance+0x120>
		 _delay_ms(10);
	     Motor_Control(FORW,100,BACK,100);//左转
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	64 e6       	ldi	r22, 0x64	; 100
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	24 e6       	ldi	r18, 0x64	; 100
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	40 e4       	ldi	r20, 0x40	; 64
     478:	5c e9       	ldi	r21, 0x9C	; 156
     47a:	ca 01       	movw	r24, r20
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <Obstacle_Avoidance+0x148>
		 for(j=0;j<50;j++)//延时
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	22 33       	cpi	r18, 0x32	; 50
     484:	d1 f7       	brne	.-12     	; 0x47a <Obstacle_Avoidance+0x146>
		 _delay_ms(10);
		 }
		 if(key_3==1)//袭击者模式
     486:	80 91 2c 02 	lds	r24, 0x022C
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	21 f5       	brne	.+72     	; 0x4d6 <Obstacle_Avoidance+0x1a2>
	     {
	      Motor_Control(FORW,100,FORW,100);//前进
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	64 e6       	ldi	r22, 0x64	; 100
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	24 e6       	ldi	r18, 0x64	; 100
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	40 e4       	ldi	r20, 0x40	; 64
     4a6:	5c e9       	ldi	r21, 0x9C	; 156
     4a8:	ca 01       	movw	r24, r20
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <Obstacle_Avoidance+0x176>
		  for(j=0;j<30;j++)//延时
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	2e 31       	cpi	r18, 0x1E	; 30
     4b2:	d1 f7       	brne	.-12     	; 0x4a8 <Obstacle_Avoidance+0x174>
     4b4:	10 c0       	rjmp	.+32     	; 0x4d6 <Obstacle_Avoidance+0x1a2>
	      _delay_ms(10);//延时
	     }
	   }
	   else
	   if(key_2==1||key_3==3)//避障模式或者小鸡模式
     4b6:	21 30       	cpi	r18, 0x01	; 1
     4b8:	21 f0       	breq	.+8      	; 0x4c2 <Obstacle_Avoidance+0x18e>
     4ba:	80 91 2c 02 	lds	r24, 0x022C
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	51 f4       	brne	.+20     	; 0x4d6 <Obstacle_Avoidance+0x1a2>
       Motor_Control(FORW,100,FORW,100);//前进
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	64 e6       	ldi	r22, 0x64	; 100
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	24 e6       	ldi	r18, 0x64	; 100
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
       if(key_3==1)//袭击者模式
     4d6:	80 91 2c 02 	lds	r24, 0x022C
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	51 f4       	brne	.+20     	; 0x4f2 <Obstacle_Avoidance+0x1be>
       Motor_Control(FORW,0,FORW,0);//前进
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
   }
}
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <huntline_deal>:
//寻线函数
void huntline_deal(void)
{
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	00 d0       	rcall	.+0      	; 0x51a <huntline_deal+0x22>
     51a:	00 d0       	rcall	.+0      	; 0x51c <huntline_deal+0x24>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
    if(data[0]>(value[0]-1)&&data[1]>(value[1]-1)&&data[2]<(value[2]-1)&&data[3]>(value[3]-1)&&data[7]>(value[4]-1))
     520:	80 91 00 01 	lds	r24, 0x0100
     524:	90 91 01 01 	lds	r25, 0x0101
     528:	a0 91 02 01 	lds	r26, 0x0102
     52c:	b0 91 03 01 	lds	r27, 0x0103
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	9a 83       	std	Y+2, r25	; 0x02
     534:	ab 83       	std	Y+3, r26	; 0x03
     536:	bc 83       	std	Y+4, r27	; 0x04
     538:	60 91 2d 02 	lds	r22, 0x022D
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	61 50       	subi	r22, 0x01	; 1
     540:	70 40       	sbci	r23, 0x00	; 0
     542:	88 27       	eor	r24, r24
     544:	77 fd       	sbrc	r23, 7
     546:	80 95       	com	r24
     548:	98 2f       	mov	r25, r24
     54a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     54e:	2b 01       	movw	r4, r22
     550:	3c 01       	movw	r6, r24
     552:	69 81       	ldd	r22, Y+1	; 0x01
     554:	7a 81       	ldd	r23, Y+2	; 0x02
     556:	8b 81       	ldd	r24, Y+3	; 0x03
     558:	9c 81       	ldd	r25, Y+4	; 0x04
     55a:	a3 01       	movw	r20, r6
     55c:	92 01       	movw	r18, r4
     55e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     562:	18 16       	cp	r1, r24
     564:	0c f0       	brlt	.+2      	; 0x568 <huntline_deal+0x70>
     566:	62 c2       	rjmp	.+1220   	; 0xa2c <__stack+0x12d>
     568:	80 90 04 01 	lds	r8, 0x0104
     56c:	90 90 05 01 	lds	r9, 0x0105
     570:	a0 90 06 01 	lds	r10, 0x0106
     574:	b0 90 07 01 	lds	r11, 0x0107
     578:	60 91 2e 02 	lds	r22, 0x022E
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	61 50       	subi	r22, 0x01	; 1
     580:	70 40       	sbci	r23, 0x00	; 0
     582:	88 27       	eor	r24, r24
     584:	77 fd       	sbrc	r23, 7
     586:	80 95       	com	r24
     588:	98 2f       	mov	r25, r24
     58a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <huntline_deal+0xae>
     5a4:	4f c0       	rjmp	.+158    	; 0x644 <huntline_deal+0x14c>
     5a6:	11 e0       	ldi	r17, 0x01	; 1
     5a8:	60 91 2f 02 	lds	r22, 0x022F
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	61 50       	subi	r22, 0x01	; 1
     5b0:	70 40       	sbci	r23, 0x00	; 0
     5b2:	88 27       	eor	r24, r24
     5b4:	77 fd       	sbrc	r23, 7
     5b6:	80 95       	com	r24
     5b8:	98 2f       	mov	r25, r24
     5ba:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	60 91 08 01 	lds	r22, 0x0108
     5c6:	70 91 09 01 	lds	r23, 0x0109
     5ca:	80 91 0a 01 	lds	r24, 0x010A
     5ce:	90 91 0b 01 	lds	r25, 0x010B
     5d2:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     5d6:	88 23       	and	r24, r24
     5d8:	ac f5       	brge	.+106    	; 0x644 <huntline_deal+0x14c>
     5da:	60 91 30 02 	lds	r22, 0x0230
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	61 50       	subi	r22, 0x01	; 1
     5e2:	70 40       	sbci	r23, 0x00	; 0
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     5f0:	9b 01       	movw	r18, r22
     5f2:	ac 01       	movw	r20, r24
     5f4:	60 91 0c 01 	lds	r22, 0x010C
     5f8:	70 91 0d 01 	lds	r23, 0x010D
     5fc:	80 91 0e 01 	lds	r24, 0x010E
     600:	90 91 0f 01 	lds	r25, 0x010F
     604:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     608:	18 16       	cp	r1, r24
     60a:	fc f4       	brge	.+62     	; 0x64a <huntline_deal+0x152>
     60c:	60 91 31 02 	lds	r22, 0x0231
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	61 50       	subi	r22, 0x01	; 1
     614:	70 40       	sbci	r23, 0x00	; 0
     616:	88 27       	eor	r24, r24
     618:	77 fd       	sbrc	r23, 7
     61a:	80 95       	com	r24
     61c:	98 2f       	mov	r25, r24
     61e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	60 91 1c 01 	lds	r22, 0x011C
     62a:	70 91 1d 01 	lds	r23, 0x011D
     62e:	80 91 1e 01 	lds	r24, 0x011E
     632:	90 91 1f 01 	lds	r25, 0x011F
     636:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     63a:	18 16       	cp	r1, r24
     63c:	34 f4       	brge	.+12     	; 0x64a <huntline_deal+0x152>
	{
		Motor_Control(FORW,100,FORW,100);//前进
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	f4 c0       	rjmp	.+488    	; 0x82c <huntline_deal+0x334>
	} 
	else if(data[0]>(value[0]-1)&&data[1]>(value[1]-1)&&data[2]<(value[2]-1)&&data[3]<(value[3]-1)&&data[7]>(value[4]-1))
     644:	11 23       	and	r17, r17
     646:	09 f4       	brne	.+2      	; 0x64a <huntline_deal+0x152>
     648:	52 c0       	rjmp	.+164    	; 0x6ee <huntline_deal+0x1f6>
     64a:	60 91 2f 02 	lds	r22, 0x022F
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	61 50       	subi	r22, 0x01	; 1
     652:	70 40       	sbci	r23, 0x00	; 0
     654:	88 27       	eor	r24, r24
     656:	77 fd       	sbrc	r23, 7
     658:	80 95       	com	r24
     65a:	98 2f       	mov	r25, r24
     65c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	60 91 08 01 	lds	r22, 0x0108
     668:	70 91 09 01 	lds	r23, 0x0109
     66c:	80 91 0a 01 	lds	r24, 0x010A
     670:	90 91 0b 01 	lds	r25, 0x010B
     674:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     678:	88 23       	and	r24, r24
     67a:	cc f5       	brge	.+114    	; 0x6ee <huntline_deal+0x1f6>
     67c:	60 91 30 02 	lds	r22, 0x0230
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	61 50       	subi	r22, 0x01	; 1
     684:	70 40       	sbci	r23, 0x00	; 0
     686:	88 27       	eor	r24, r24
     688:	77 fd       	sbrc	r23, 7
     68a:	80 95       	com	r24
     68c:	98 2f       	mov	r25, r24
     68e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	60 91 0c 01 	lds	r22, 0x010C
     69a:	70 91 0d 01 	lds	r23, 0x010D
     69e:	80 91 0e 01 	lds	r24, 0x010E
     6a2:	90 91 0f 01 	lds	r25, 0x010F
     6a6:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     6aa:	88 23       	and	r24, r24
     6ac:	04 f5       	brge	.+64     	; 0x6ee <huntline_deal+0x1f6>
     6ae:	60 91 31 02 	lds	r22, 0x0231
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	61 50       	subi	r22, 0x01	; 1
     6b6:	70 40       	sbci	r23, 0x00	; 0
     6b8:	88 27       	eor	r24, r24
     6ba:	77 fd       	sbrc	r23, 7
     6bc:	80 95       	com	r24
     6be:	98 2f       	mov	r25, r24
     6c0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	60 91 1c 01 	lds	r22, 0x011C
     6cc:	70 91 1d 01 	lds	r23, 0x011D
     6d0:	80 91 1e 01 	lds	r24, 0x011E
     6d4:	90 91 1f 01 	lds	r25, 0x011F
     6d8:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     6dc:	18 16       	cp	r1, r24
     6de:	3c f4       	brge	.+14     	; 0x6ee <huntline_deal+0x1f6>
	{
		Motor_Control(BACK,0,FORW,100);//右转
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	6f c2       	rjmp	.+1246   	; 0xbcc <__stack+0x2cd>
	}
	else if(data[0]>(value[0]-1)&&data[1]>(value[1]-1)&&data[2]>(value[2]-1)&&data[3]<(value[3]-1)&&data[7]>(value[4]-1))
     6ee:	11 23       	and	r17, r17
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <huntline_deal+0x1fc>
     6f2:	4c c0       	rjmp	.+152    	; 0x78c <huntline_deal+0x294>
     6f4:	60 91 2f 02 	lds	r22, 0x022F
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	61 50       	subi	r22, 0x01	; 1
     6fc:	70 40       	sbci	r23, 0x00	; 0
     6fe:	88 27       	eor	r24, r24
     700:	77 fd       	sbrc	r23, 7
     702:	80 95       	com	r24
     704:	98 2f       	mov	r25, r24
     706:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	60 91 08 01 	lds	r22, 0x0108
     712:	70 91 09 01 	lds	r23, 0x0109
     716:	80 91 0a 01 	lds	r24, 0x010A
     71a:	90 91 0b 01 	lds	r25, 0x010B
     71e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     722:	18 16       	cp	r1, r24
     724:	9c f5       	brge	.+102    	; 0x78c <huntline_deal+0x294>
     726:	60 91 30 02 	lds	r22, 0x0230
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	61 50       	subi	r22, 0x01	; 1
     72e:	70 40       	sbci	r23, 0x00	; 0
     730:	88 27       	eor	r24, r24
     732:	77 fd       	sbrc	r23, 7
     734:	80 95       	com	r24
     736:	98 2f       	mov	r25, r24
     738:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	60 91 0c 01 	lds	r22, 0x010C
     744:	70 91 0d 01 	lds	r23, 0x010D
     748:	80 91 0e 01 	lds	r24, 0x010E
     74c:	90 91 0f 01 	lds	r25, 0x010F
     750:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     754:	88 23       	and	r24, r24
     756:	d4 f4       	brge	.+52     	; 0x78c <huntline_deal+0x294>
     758:	60 91 31 02 	lds	r22, 0x0231
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	61 50       	subi	r22, 0x01	; 1
     760:	70 40       	sbci	r23, 0x00	; 0
     762:	88 27       	eor	r24, r24
     764:	77 fd       	sbrc	r23, 7
     766:	80 95       	com	r24
     768:	98 2f       	mov	r25, r24
     76a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	60 91 1c 01 	lds	r22, 0x011C
     776:	70 91 1d 01 	lds	r23, 0x011D
     77a:	80 91 1e 01 	lds	r24, 0x011E
     77e:	90 91 1f 01 	lds	r25, 0x011F
     782:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     786:	18 16       	cp	r1, r24
     788:	0c f4       	brge	.+2      	; 0x78c <huntline_deal+0x294>
     78a:	aa cf       	rjmp	.-172    	; 0x6e0 <huntline_deal+0x1e8>
	{
		Motor_Control(BACK,0,FORW,100);//右转
	}
	else if(data[0]>(value[0]-1)&&data[1]>(value[1]-1)&&data[2]>(value[2]-1)&&data[3]<(value[3]-1)&&data[7]<(value[4]-1))
     78c:	11 23       	and	r17, r17
     78e:	09 f4       	brne	.+2      	; 0x792 <huntline_deal+0x29a>
     790:	50 c0       	rjmp	.+160    	; 0x832 <huntline_deal+0x33a>
     792:	60 91 2f 02 	lds	r22, 0x022F
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	61 50       	subi	r22, 0x01	; 1
     79a:	70 40       	sbci	r23, 0x00	; 0
     79c:	88 27       	eor	r24, r24
     79e:	77 fd       	sbrc	r23, 7
     7a0:	80 95       	com	r24
     7a2:	98 2f       	mov	r25, r24
     7a4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	60 91 08 01 	lds	r22, 0x0108
     7b0:	70 91 09 01 	lds	r23, 0x0109
     7b4:	80 91 0a 01 	lds	r24, 0x010A
     7b8:	90 91 0b 01 	lds	r25, 0x010B
     7bc:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     7c0:	18 16       	cp	r1, r24
     7c2:	bc f5       	brge	.+110    	; 0x832 <huntline_deal+0x33a>
     7c4:	60 91 30 02 	lds	r22, 0x0230
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	61 50       	subi	r22, 0x01	; 1
     7cc:	70 40       	sbci	r23, 0x00	; 0
     7ce:	88 27       	eor	r24, r24
     7d0:	77 fd       	sbrc	r23, 7
     7d2:	80 95       	com	r24
     7d4:	98 2f       	mov	r25, r24
     7d6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	60 91 0c 01 	lds	r22, 0x010C
     7e2:	70 91 0d 01 	lds	r23, 0x010D
     7e6:	80 91 0e 01 	lds	r24, 0x010E
     7ea:	90 91 0f 01 	lds	r25, 0x010F
     7ee:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	f4 f4       	brge	.+60     	; 0x832 <huntline_deal+0x33a>
     7f6:	60 91 31 02 	lds	r22, 0x0231
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	61 50       	subi	r22, 0x01	; 1
     7fe:	70 40       	sbci	r23, 0x00	; 0
     800:	88 27       	eor	r24, r24
     802:	77 fd       	sbrc	r23, 7
     804:	80 95       	com	r24
     806:	98 2f       	mov	r25, r24
     808:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	60 91 1c 01 	lds	r22, 0x011C
     814:	70 91 1d 01 	lds	r23, 0x011D
     818:	80 91 1e 01 	lds	r24, 0x011E
     81c:	90 91 1f 01 	lds	r25, 0x011F
     820:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     824:	88 23       	and	r24, r24
     826:	2c f4       	brge	.+10     	; 0x832 <huntline_deal+0x33a>
	{
		Motor_Control(BACK,100,FORW,100);//右转
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	64 e6       	ldi	r22, 0x64	; 100
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	5b cf       	rjmp	.-330    	; 0x6e8 <huntline_deal+0x1f0>
	}
	else if(data[0]>(value[0]-1)&&data[1]>(value[1]-1)&&data[2]>(value[2]-1)&&data[3]>(value[3]-1)&&data[7]<(value[4]-1))
     832:	11 23       	and	r17, r17
     834:	09 f4       	brne	.+2      	; 0x838 <huntline_deal+0x340>
     836:	4c c0       	rjmp	.+152    	; 0x8d0 <huntline_deal+0x3d8>
     838:	60 91 2f 02 	lds	r22, 0x022F
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	61 50       	subi	r22, 0x01	; 1
     840:	70 40       	sbci	r23, 0x00	; 0
     842:	88 27       	eor	r24, r24
     844:	77 fd       	sbrc	r23, 7
     846:	80 95       	com	r24
     848:	98 2f       	mov	r25, r24
     84a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	60 91 08 01 	lds	r22, 0x0108
     856:	70 91 09 01 	lds	r23, 0x0109
     85a:	80 91 0a 01 	lds	r24, 0x010A
     85e:	90 91 0b 01 	lds	r25, 0x010B
     862:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     866:	18 16       	cp	r1, r24
     868:	9c f5       	brge	.+102    	; 0x8d0 <huntline_deal+0x3d8>
     86a:	60 91 30 02 	lds	r22, 0x0230
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	61 50       	subi	r22, 0x01	; 1
     872:	70 40       	sbci	r23, 0x00	; 0
     874:	88 27       	eor	r24, r24
     876:	77 fd       	sbrc	r23, 7
     878:	80 95       	com	r24
     87a:	98 2f       	mov	r25, r24
     87c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	60 91 0c 01 	lds	r22, 0x010C
     888:	70 91 0d 01 	lds	r23, 0x010D
     88c:	80 91 0e 01 	lds	r24, 0x010E
     890:	90 91 0f 01 	lds	r25, 0x010F
     894:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     898:	18 16       	cp	r1, r24
     89a:	d4 f4       	brge	.+52     	; 0x8d0 <huntline_deal+0x3d8>
     89c:	60 91 31 02 	lds	r22, 0x0231
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	61 50       	subi	r22, 0x01	; 1
     8a4:	70 40       	sbci	r23, 0x00	; 0
     8a6:	88 27       	eor	r24, r24
     8a8:	77 fd       	sbrc	r23, 7
     8aa:	80 95       	com	r24
     8ac:	98 2f       	mov	r25, r24
     8ae:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	60 91 1c 01 	lds	r22, 0x011C
     8ba:	70 91 1d 01 	lds	r23, 0x011D
     8be:	80 91 1e 01 	lds	r24, 0x011E
     8c2:	90 91 1f 01 	lds	r25, 0x011F
     8c6:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     8ca:	88 23       	and	r24, r24
     8cc:	0c f4       	brge	.+2      	; 0x8d0 <huntline_deal+0x3d8>
     8ce:	ac cf       	rjmp	.-168    	; 0x828 <huntline_deal+0x330>
	{
		Motor_Control(BACK,100,FORW,100);//右转
	}
	else if(data[0]>(value[0]-1)&&data[1]<(value[1]-1)&&data[2]<(value[2]-1)&&data[3]>(value[3]-1)&&data[7]>(value[4]-1))
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	c5 01       	movw	r24, r10
     8d4:	b4 01       	movw	r22, r8
     8d6:	a7 01       	movw	r20, r14
     8d8:	96 01       	movw	r18, r12
     8da:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     8de:	88 23       	and	r24, r24
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <huntline_deal+0x3ec>
     8e2:	4d c0       	rjmp	.+154    	; 0x97e <__stack+0x7f>
     8e4:	11 e0       	ldi	r17, 0x01	; 1
     8e6:	60 91 2f 02 	lds	r22, 0x022F
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	61 50       	subi	r22, 0x01	; 1
     8ee:	70 40       	sbci	r23, 0x00	; 0
     8f0:	88 27       	eor	r24, r24
     8f2:	77 fd       	sbrc	r23, 7
     8f4:	80 95       	com	r24
     8f6:	98 2f       	mov	r25, r24
     8f8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	60 91 08 01 	lds	r22, 0x0108
     904:	70 91 09 01 	lds	r23, 0x0109
     908:	80 91 0a 01 	lds	r24, 0x010A
     90c:	90 91 0b 01 	lds	r25, 0x010B
     910:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     914:	88 23       	and	r24, r24
     916:	9c f5       	brge	.+102    	; 0x97e <__stack+0x7f>
     918:	60 91 30 02 	lds	r22, 0x0230
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	61 50       	subi	r22, 0x01	; 1
     920:	70 40       	sbci	r23, 0x00	; 0
     922:	88 27       	eor	r24, r24
     924:	77 fd       	sbrc	r23, 7
     926:	80 95       	com	r24
     928:	98 2f       	mov	r25, r24
     92a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	60 91 0c 01 	lds	r22, 0x010C
     936:	70 91 0d 01 	lds	r23, 0x010D
     93a:	80 91 0e 01 	lds	r24, 0x010E
     93e:	90 91 0f 01 	lds	r25, 0x010F
     942:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     946:	18 16       	cp	r1, r24
     948:	ec f4       	brge	.+58     	; 0x984 <__stack+0x85>
     94a:	60 91 31 02 	lds	r22, 0x0231
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	61 50       	subi	r22, 0x01	; 1
     952:	70 40       	sbci	r23, 0x00	; 0
     954:	88 27       	eor	r24, r24
     956:	77 fd       	sbrc	r23, 7
     958:	80 95       	com	r24
     95a:	98 2f       	mov	r25, r24
     95c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	60 91 1c 01 	lds	r22, 0x011C
     968:	70 91 1d 01 	lds	r23, 0x011D
     96c:	80 91 1e 01 	lds	r24, 0x011E
     970:	90 91 1f 01 	lds	r25, 0x011F
     974:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     978:	18 16       	cp	r1, r24
     97a:	24 f4       	brge	.+8      	; 0x984 <__stack+0x85>
     97c:	4e c0       	rjmp	.+156    	; 0xa1a <__stack+0x11b>
	{
		Motor_Control(FORW,100,BACK,0);//左转
	}
	else if(data[0]>(value[0]-1)&&data[1]<(value[1]-1)&&data[2]>(value[2]-1)&&data[3]>(value[3]-1)&&data[7]>(value[4]-1))
     97e:	11 23       	and	r17, r17
     980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
     982:	54 c0       	rjmp	.+168    	; 0xa2c <__stack+0x12d>
     984:	60 91 2f 02 	lds	r22, 0x022F
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	61 50       	subi	r22, 0x01	; 1
     98c:	70 40       	sbci	r23, 0x00	; 0
     98e:	88 27       	eor	r24, r24
     990:	77 fd       	sbrc	r23, 7
     992:	80 95       	com	r24
     994:	98 2f       	mov	r25, r24
     996:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	60 91 08 01 	lds	r22, 0x0108
     9a2:	70 91 09 01 	lds	r23, 0x0109
     9a6:	80 91 0a 01 	lds	r24, 0x010A
     9aa:	90 91 0b 01 	lds	r25, 0x010B
     9ae:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     9b2:	18 16       	cp	r1, r24
     9b4:	dc f5       	brge	.+118    	; 0xa2c <__stack+0x12d>
     9b6:	60 91 30 02 	lds	r22, 0x0230
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	61 50       	subi	r22, 0x01	; 1
     9be:	70 40       	sbci	r23, 0x00	; 0
     9c0:	88 27       	eor	r24, r24
     9c2:	77 fd       	sbrc	r23, 7
     9c4:	80 95       	com	r24
     9c6:	98 2f       	mov	r25, r24
     9c8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	60 91 0c 01 	lds	r22, 0x010C
     9d4:	70 91 0d 01 	lds	r23, 0x010D
     9d8:	80 91 0e 01 	lds	r24, 0x010E
     9dc:	90 91 0f 01 	lds	r25, 0x010F
     9e0:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     9e4:	18 16       	cp	r1, r24
     9e6:	14 f5       	brge	.+68     	; 0xa2c <__stack+0x12d>
     9e8:	60 91 31 02 	lds	r22, 0x0231
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	61 50       	subi	r22, 0x01	; 1
     9f0:	70 40       	sbci	r23, 0x00	; 0
     9f2:	88 27       	eor	r24, r24
     9f4:	77 fd       	sbrc	r23, 7
     9f6:	80 95       	com	r24
     9f8:	98 2f       	mov	r25, r24
     9fa:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	60 91 1c 01 	lds	r22, 0x011C
     a06:	70 91 1d 01 	lds	r23, 0x011D
     a0a:	80 91 1e 01 	lds	r24, 0x011E
     a0e:	90 91 1f 01 	lds	r25, 0x011F
     a12:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     a16:	18 16       	cp	r1, r24
     a18:	4c f4       	brge	.+18     	; 0xa2c <__stack+0x12d>
	{
		Motor_Control(FORW,100,BACK,0);//左转
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	64 e6       	ldi	r22, 0x64	; 100
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	d2 c0       	rjmp	.+420    	; 0xbd0 <__stack+0x2d1>
	}
	else if(data[0]<(value[0]-1)&&data[1]<(value[1]-1)&&data[2]>(value[2]-1)&&data[3]>(value[3]-1)&&data[7]>(value[4]-1))
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	7a 81       	ldd	r23, Y+2	; 0x02
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	a3 01       	movw	r20, r6
     a36:	92 01       	movw	r18, r4
     a38:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <__stack+0x143>
     a40:	c9 c0       	rjmp	.+402    	; 0xbd4 <__stack+0x2d5>
     a42:	a0 90 04 01 	lds	r10, 0x0104
     a46:	b0 90 05 01 	lds	r11, 0x0105
     a4a:	c0 90 06 01 	lds	r12, 0x0106
     a4e:	d0 90 07 01 	lds	r13, 0x0107
     a52:	60 91 2e 02 	lds	r22, 0x022E
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	61 50       	subi	r22, 0x01	; 1
     a5a:	70 40       	sbci	r23, 0x00	; 0
     a5c:	88 27       	eor	r24, r24
     a5e:	77 fd       	sbrc	r23, 7
     a60:	80 95       	com	r24
     a62:	98 2f       	mov	r25, r24
     a64:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     a68:	7b 01       	movw	r14, r22
     a6a:	8c 01       	movw	r16, r24
     a6c:	c6 01       	movw	r24, r12
     a6e:	b5 01       	movw	r22, r10
     a70:	a8 01       	movw	r20, r16
     a72:	97 01       	movw	r18, r14
     a74:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     a78:	88 23       	and	r24, r24
     a7a:	0c f0       	brlt	.+2      	; 0xa7e <__stack+0x17f>
     a7c:	4c c0       	rjmp	.+152    	; 0xb16 <__stack+0x217>
     a7e:	60 91 2f 02 	lds	r22, 0x022F
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	61 50       	subi	r22, 0x01	; 1
     a86:	70 40       	sbci	r23, 0x00	; 0
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	60 91 08 01 	lds	r22, 0x0108
     a9c:	70 91 09 01 	lds	r23, 0x0109
     aa0:	80 91 0a 01 	lds	r24, 0x010A
     aa4:	90 91 0b 01 	lds	r25, 0x010B
     aa8:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     aac:	18 16       	cp	r1, r24
     aae:	9c f5       	brge	.+102    	; 0xb16 <__stack+0x217>
     ab0:	60 91 30 02 	lds	r22, 0x0230
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	61 50       	subi	r22, 0x01	; 1
     ab8:	70 40       	sbci	r23, 0x00	; 0
     aba:	88 27       	eor	r24, r24
     abc:	77 fd       	sbrc	r23, 7
     abe:	80 95       	com	r24
     ac0:	98 2f       	mov	r25, r24
     ac2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	60 91 0c 01 	lds	r22, 0x010C
     ace:	70 91 0d 01 	lds	r23, 0x010D
     ad2:	80 91 0e 01 	lds	r24, 0x010E
     ad6:	90 91 0f 01 	lds	r25, 0x010F
     ada:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     ade:	18 16       	cp	r1, r24
     ae0:	d4 f4       	brge	.+52     	; 0xb16 <__stack+0x217>
     ae2:	60 91 31 02 	lds	r22, 0x0231
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	61 50       	subi	r22, 0x01	; 1
     aea:	70 40       	sbci	r23, 0x00	; 0
     aec:	88 27       	eor	r24, r24
     aee:	77 fd       	sbrc	r23, 7
     af0:	80 95       	com	r24
     af2:	98 2f       	mov	r25, r24
     af4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	60 91 1c 01 	lds	r22, 0x011C
     b00:	70 91 1d 01 	lds	r23, 0x011D
     b04:	80 91 1e 01 	lds	r24, 0x011E
     b08:	90 91 1f 01 	lds	r25, 0x011F
     b0c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     b10:	18 16       	cp	r1, r24
     b12:	0c f4       	brge	.+2      	; 0xb16 <__stack+0x217>
     b14:	55 c0       	rjmp	.+170    	; 0xbc0 <__stack+0x2c1>
	{
		Motor_Control(FORW,100,BACK,100);//左转
	}
	else if(data[0]<(value[0]-1)&&data[1]>(value[1]-1)&&data[2]>(value[2]-1)&&data[3]>(value[3]-1)&&data[7]>(value[4]-1))
     b16:	c6 01       	movw	r24, r12
     b18:	b5 01       	movw	r22, r10
     b1a:	a8 01       	movw	r20, r16
     b1c:	97 01       	movw	r18, r14
     b1e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     b22:	18 16       	cp	r1, r24
     b24:	0c f0       	brlt	.+2      	; 0xb28 <__stack+0x229>
     b26:	56 c0       	rjmp	.+172    	; 0xbd4 <__stack+0x2d5>
     b28:	60 91 2f 02 	lds	r22, 0x022F
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	61 50       	subi	r22, 0x01	; 1
     b30:	70 40       	sbci	r23, 0x00	; 0
     b32:	88 27       	eor	r24, r24
     b34:	77 fd       	sbrc	r23, 7
     b36:	80 95       	com	r24
     b38:	98 2f       	mov	r25, r24
     b3a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	60 91 08 01 	lds	r22, 0x0108
     b46:	70 91 09 01 	lds	r23, 0x0109
     b4a:	80 91 0a 01 	lds	r24, 0x010A
     b4e:	90 91 0b 01 	lds	r25, 0x010B
     b52:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     b56:	18 16       	cp	r1, r24
     b58:	0c f0       	brlt	.+2      	; 0xb5c <__stack+0x25d>
     b5a:	3c c0       	rjmp	.+120    	; 0xbd4 <__stack+0x2d5>
     b5c:	60 91 30 02 	lds	r22, 0x0230
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	61 50       	subi	r22, 0x01	; 1
     b64:	70 40       	sbci	r23, 0x00	; 0
     b66:	88 27       	eor	r24, r24
     b68:	77 fd       	sbrc	r23, 7
     b6a:	80 95       	com	r24
     b6c:	98 2f       	mov	r25, r24
     b6e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     b72:	9b 01       	movw	r18, r22
     b74:	ac 01       	movw	r20, r24
     b76:	60 91 0c 01 	lds	r22, 0x010C
     b7a:	70 91 0d 01 	lds	r23, 0x010D
     b7e:	80 91 0e 01 	lds	r24, 0x010E
     b82:	90 91 0f 01 	lds	r25, 0x010F
     b86:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     b8a:	18 16       	cp	r1, r24
     b8c:	1c f5       	brge	.+70     	; 0xbd4 <__stack+0x2d5>
     b8e:	60 91 31 02 	lds	r22, 0x0231
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	61 50       	subi	r22, 0x01	; 1
     b96:	70 40       	sbci	r23, 0x00	; 0
     b98:	88 27       	eor	r24, r24
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	80 95       	com	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	60 91 1c 01 	lds	r22, 0x011C
     bac:	70 91 1d 01 	lds	r23, 0x011D
     bb0:	80 91 1e 01 	lds	r24, 0x011E
     bb4:	90 91 1f 01 	lds	r25, 0x011F
     bb8:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	54 f4       	brge	.+20     	; 0xbd4 <__stack+0x2d5>
	{
		Motor_Control(FORW,100,BACK,100);//左转
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	64 e6       	ldi	r22, 0x64	; 100
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	24 e6       	ldi	r18, 0x64	; 100
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
	}

}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	6f 90       	pop	r6
     bf8:	5f 90       	pop	r5
     bfa:	4f 90       	pop	r4
     bfc:	08 95       	ret

00000bfe <value_adjust>:
//电压值调整函数
void value_adjust(char num)
{
     if(num==1)
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	a1 f4       	brne	.+40     	; 0xc2a <value_adjust+0x2c>
	 {
	    if(data[0]>value[0])
     c02:	60 91 2d 02 	lds	r22, 0x022D
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	88 27       	eor	r24, r24
     c0a:	77 fd       	sbrc	r23, 7
     c0c:	80 95       	com	r24
     c0e:	98 2f       	mov	r25, r24
     c10:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     c14:	9b 01       	movw	r18, r22
     c16:	ac 01       	movw	r20, r24
     c18:	60 91 00 01 	lds	r22, 0x0100
     c1c:	70 91 01 01 	lds	r23, 0x0101
     c20:	80 91 02 01 	lds	r24, 0x0102
     c24:	90 91 03 01 	lds	r25, 0x0103
     c28:	41 c0       	rjmp	.+130    	; 0xcac <value_adjust+0xae>
        {
		   PORTB |=(1<<5); //当前值大绿灯亮
		   PORTB &=~(1<<4);
        } 
	 }
	 if(num==2)
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	a1 f4       	brne	.+40     	; 0xc56 <value_adjust+0x58>
	 {
	    if(data[1]>value[1])
     c2e:	60 91 2e 02 	lds	r22, 0x022E
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	88 27       	eor	r24, r24
     c36:	77 fd       	sbrc	r23, 7
     c38:	80 95       	com	r24
     c3a:	98 2f       	mov	r25, r24
     c3c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     c40:	9b 01       	movw	r18, r22
     c42:	ac 01       	movw	r20, r24
     c44:	60 91 04 01 	lds	r22, 0x0104
     c48:	70 91 05 01 	lds	r23, 0x0105
     c4c:	80 91 06 01 	lds	r24, 0x0106
     c50:	90 91 07 01 	lds	r25, 0x0107
     c54:	2b c0       	rjmp	.+86     	; 0xcac <value_adjust+0xae>
        {
		   PORTB |=(1<<5); //当前值大绿灯亮
		   PORTB &=~(1<<4);
        } 
	 }
	 if(num==3)
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	a1 f4       	brne	.+40     	; 0xc82 <value_adjust+0x84>
	 {
	    if(data[2]>value[2])
     c5a:	60 91 2f 02 	lds	r22, 0x022F
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	88 27       	eor	r24, r24
     c62:	77 fd       	sbrc	r23, 7
     c64:	80 95       	com	r24
     c66:	98 2f       	mov	r25, r24
     c68:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	60 91 08 01 	lds	r22, 0x0108
     c74:	70 91 09 01 	lds	r23, 0x0109
     c78:	80 91 0a 01 	lds	r24, 0x010A
     c7c:	90 91 0b 01 	lds	r25, 0x010B
     c80:	15 c0       	rjmp	.+42     	; 0xcac <value_adjust+0xae>
        {
		   PORTB |=(1<<5); //当前值大绿灯亮
		   PORTB &=~(1<<4);
        } 
	 }
	 if(num==4)
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	d1 f4       	brne	.+52     	; 0xcba <value_adjust+0xbc>
	 {
	    if(data[3]>value[3])
     c86:	60 91 30 02 	lds	r22, 0x0230
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	88 27       	eor	r24, r24
     c8e:	77 fd       	sbrc	r23, 7
     c90:	80 95       	com	r24
     c92:	98 2f       	mov	r25, r24
     c94:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	60 91 0c 01 	lds	r22, 0x010C
     ca0:	70 91 0d 01 	lds	r23, 0x010D
     ca4:	80 91 0e 01 	lds	r24, 0x010E
     ca8:	90 91 0f 01 	lds	r25, 0x010F
     cac:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	e4 f0       	brlt	.+56     	; 0xcec <value_adjust+0xee>
		   PORTB |=(1<<4); //当前值小红灯亮
		   PORTB &=~(1<<5);
        }
        else
        {
		   PORTB |=(1<<5); //当前值大绿灯亮
     cb4:	2d 9a       	sbi	0x05, 5	; 5
		   PORTB &=~(1<<4);
     cb6:	2c 98       	cbi	0x05, 4	; 5
     cb8:	08 95       	ret
        } 
	 }
	 if(num==5)
     cba:	85 30       	cpi	r24, 0x05	; 5
     cbc:	e1 f4       	brne	.+56     	; 0xcf6 <value_adjust+0xf8>
	 {
	    if(data[4]>value[4])
     cbe:	60 91 31 02 	lds	r22, 0x0231
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	88 27       	eor	r24, r24
     cc6:	77 fd       	sbrc	r23, 7
     cc8:	80 95       	com	r24
     cca:	98 2f       	mov	r25, r24
     ccc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	60 91 10 01 	lds	r22, 0x0110
     cd8:	70 91 11 01 	lds	r23, 0x0111
     cdc:	80 91 12 01 	lds	r24, 0x0112
     ce0:	90 91 13 01 	lds	r25, 0x0113
     ce4:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     ce8:	18 16       	cp	r1, r24
     cea:	1c f4       	brge	.+6      	; 0xcf2 <value_adjust+0xf4>
        {
		   PORTB |=(1<<4); //当前值小红灯亮
     cec:	2c 9a       	sbi	0x05, 4	; 5
		   PORTB &=~(1<<5);
     cee:	2d 98       	cbi	0x05, 5	; 5
     cf0:	08 95       	ret
        }
        else
        {
		   PORTB |=(1<<5); //当前值大绿灯亮
     cf2:	2d 9a       	sbi	0x05, 5	; 5
		   PORTB &=~(1<<4);
     cf4:	2c 98       	cbi	0x05, 4	; 5
     cf6:	08 95       	ret

00000cf8 <hunt_light>:
        } 
	 }
}
//寻光函数
void hunt_light(void)
{
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17

	if (data[4]> 1 && data[4]< 2) 
     d00:	e0 90 10 01 	lds	r14, 0x0110
     d04:	f0 90 11 01 	lds	r15, 0x0111
     d08:	00 91 12 01 	lds	r16, 0x0112
     d0c:	10 91 13 01 	lds	r17, 0x0113
     d10:	c8 01       	movw	r24, r16
     d12:	b7 01       	movw	r22, r14
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     d20:	18 16       	cp	r1, r24
     d22:	8c f4       	brge	.+34     	; 0xd46 <hunt_light+0x4e>
     d24:	c8 01       	movw	r24, r16
     d26:	b7 01       	movw	r22, r14
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e4       	ldi	r21, 0x40	; 64
     d30:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     d34:	88 23       	and	r24, r24
     d36:	3c f4       	brge	.+14     	; 0xd46 <hunt_light+0x4e>
	{
	     Motor_Control(BACK,100,FORW,100);//右转
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	64 e6       	ldi	r22, 0x64	; 100
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	1a c0       	rjmp	.+52     	; 0xd7a <hunt_light+0x82>
	}
	else if (data[4]> 4 && data[4]< 5)
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	50 e4       	ldi	r21, 0x40	; 64
     d52:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
     d56:	18 16       	cp	r1, r24
     d58:	9c f4       	brge	.+38     	; 0xd80 <hunt_light+0x88>
     d5a:	c8 01       	movw	r24, r16
     d5c:	b7 01       	movw	r22, r14
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 ea       	ldi	r20, 0xA0	; 160
     d64:	50 e4       	ldi	r21, 0x40	; 64
     d66:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	4c f4       	brge	.+18     	; 0xd80 <hunt_light+0x88>
	{
	    Motor_Control(FORW,100,BACK,100);//左转
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	64 e6       	ldi	r22, 0x64	; 100
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	24 e6       	ldi	r18, 0x64	; 100
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <hunt_light+0x98>
	}
	else
	{
		Motor_Control(FORW,0,FORW,0);//停止
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
	}

}
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	08 95       	ret

00000d9e <timer1_init>:
//遥控

//设置定时器T1为定时模式
void timer1_init(void)
{
  TCCR1A = 0X00; 
     d9e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0X05;//给定时器时钟源  
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0X00;
     da8:	10 92 82 00 	sts	0x0082, r1
  TCNT1 = 0X00;
     dac:	10 92 85 00 	sts	0x0085, r1
     db0:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = 0X00;//禁止定时器溢出中断
     db4:	10 92 6f 00 	sts	0x006F, r1
}
     db8:	08 95       	ret

00000dba <remote_deal>:
//执行译码结果
void remote_deal(void)
{ 
  switch(ir_code)
     dba:	80 91 3a 02 	lds	r24, 0x023A
     dbe:	90 91 3b 02 	lds	r25, 0x023B
     dc2:	2b ef       	ldi	r18, 0xFB	; 251
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	92 07       	cpc	r25, r18
     dc8:	31 f1       	breq	.+76     	; 0xe16 <remote_deal+0x5c>
     dca:	2b ef       	ldi	r18, 0xFB	; 251
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	92 07       	cpc	r25, r18
     dd0:	44 f4       	brge	.+16     	; 0xde2 <remote_deal+0x28>
     dd2:	26 ef       	ldi	r18, 0xF6	; 246
     dd4:	89 30       	cpi	r24, 0x09	; 9
     dd6:	92 07       	cpc	r25, r18
     dd8:	d9 f0       	breq	.+54     	; 0xe10 <remote_deal+0x56>
     dda:	86 50       	subi	r24, 0x06	; 6
     ddc:	99 4f       	sbci	r25, 0xF9	; 249
     dde:	81 f5       	brne	.+96     	; 0xe40 <remote_deal+0x86>
     de0:	25 c0       	rjmp	.+74     	; 0xe2c <remote_deal+0x72>
     de2:	2e ef       	ldi	r18, 0xFE	; 254
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	92 07       	cpc	r25, r18
     de8:	61 f0       	breq	.+24     	; 0xe02 <remote_deal+0x48>
     dea:	80 50       	subi	r24, 0x00	; 0
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	41 f5       	brne	.+80     	; 0xe40 <remote_deal+0x86>
  {
    case 0xff00://停止
       Motor_Control(FORW,0,FORW,0);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	41 e0       	ldi	r20, 0x01	; 1
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	12 c0       	rjmp	.+36     	; 0xe26 <remote_deal+0x6c>
      break;
    case 0xfe01://前进
	   Motor_Control(FORW,100,FORW,100);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	64 e6       	ldi	r22, 0x64	; 100
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <remote_deal+0x68>
       break;
    case 0xf609://后退
	   Motor_Control(BACK,100,BACK,100);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <remote_deal+0x60>
       break;
    case 0xfb04://左转
	   Motor_Control(FORW,100,BACK,100);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	64 e6       	ldi	r22, 0x64	; 100
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	24 e6       	ldi	r18, 0x64	; 100
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     e2a:	08 95       	ret
       break;
    case 0xf906://右转
      Motor_Control(BACK,100,FORW,100);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	64 e6       	ldi	r22, 0x64	; 100
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	24 e6       	ldi	r18, 0x64	; 100
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
     e40:	08 95       	ret

00000e42 <logic_value>:
  }
}

char logic_value()//逻辑‘0’和‘1’判断函数
{
    while(!(PINB&0X01)); //低等待
     e42:	18 9b       	sbis	0x03, 0	; 3
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <logic_value>
     Pulse_Width=TCNT1;
     e46:	80 91 84 00 	lds	r24, 0x0084
     e4a:	90 91 85 00 	lds	r25, 0x0085
     e4e:	90 93 39 02 	sts	0x0239, r25
     e52:	80 93 38 02 	sts	0x0238, r24
     TCNT1=0;
     e56:	10 92 85 00 	sts	0x0085, r1
     e5a:	10 92 84 00 	sts	0x0084, r1
     if(Pulse_Width>=7&&Pulse_Width<=10)//低电平560us
     e5e:	07 97       	sbiw	r24, 0x07	; 7
     e60:	04 97       	sbiw	r24, 0x04	; 4
     e62:	d8 f4       	brcc	.+54     	; 0xe9a <logic_value+0x58>
     {
         while(PINB&0X01);//是高就等待
     e64:	18 99       	sbic	0x03, 0	; 3
     e66:	fe cf       	rjmp	.-4      	; 0xe64 <logic_value+0x22>
         Pulse_Width=TCNT1;
     e68:	20 91 84 00 	lds	r18, 0x0084
     e6c:	30 91 85 00 	lds	r19, 0x0085
     e70:	30 93 39 02 	sts	0x0239, r19
     e74:	20 93 38 02 	sts	0x0238, r18
         TCNT1=0;
     e78:	10 92 85 00 	sts	0x0085, r1
     e7c:	10 92 84 00 	sts	0x0084, r1
         if(Pulse_Width>=7&&Pulse_Width<=10)//接着高电平560us
     e80:	c9 01       	movw	r24, r18
     e82:	07 97       	sbiw	r24, 0x07	; 7
     e84:	04 97       	sbiw	r24, 0x04	; 4
     e86:	10 f4       	brcc	.+4      	; 0xe8c <logic_value+0x4a>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
           return 0;
         else if(Pulse_Width>=25&&Pulse_Width<=27) //接着高电平1.7ms
     e8c:	29 51       	subi	r18, 0x19	; 25
     e8e:	30 40       	sbci	r19, 0x00	; 0
     e90:	23 30       	cpi	r18, 0x03	; 3
     e92:	31 05       	cpc	r19, r1
     e94:	10 f4       	brcc	.+4      	; 0xe9a <logic_value+0x58>
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	08 95       	ret
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
           return 1;
     }
     return -1;
}
     e9c:	08 95       	ret

00000e9e <pulse_deal>:

void pulse_deal()//接收地址码和命令码
{
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	c0 e0       	ldi	r28, 0x00	; 0
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
  int i;
  //地址码
  //执行8个0
  for(i=0; i<8; i++)
  {
    if(logic_value() != 0) //不是0
     eaa:	0e 94 21 07 	call	0xe42	; 0xe42 <logic_value>
     eae:	88 23       	and	r24, r24
     eb0:	b9 f5       	brne	.+110    	; 0xf20 <pulse_deal+0x82>
void pulse_deal()//接收地址码和命令码
{
  int i;
  //地址码
  //执行8个0
  for(i=0; i<8; i++)
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	c8 30       	cpi	r28, 0x08	; 8
     eb6:	d1 05       	cpc	r29, r1
     eb8:	c1 f7       	brne	.-16     	; 0xeaa <pulse_deal+0xc>
     eba:	c0 e0       	ldi	r28, 0x00	; 0
     ebc:	d0 e0       	ldi	r29, 0x00	; 0
  }
  //地址反码
  //执行6个1
  for(i=0; i<6; i++)
  {
     if(logic_value()!= 1) //不是1
     ebe:	0e 94 21 07 	call	0xe42	; 0xe42 <logic_value>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	69 f5       	brne	.+90     	; 0xf20 <pulse_deal+0x82>
    if(logic_value() != 0) //不是0
      return;
  }
  //地址反码
  //执行6个1
  for(i=0; i<6; i++)
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	c6 30       	cpi	r28, 0x06	; 6
     eca:	d1 05       	cpc	r29, r1
     ecc:	c1 f7       	brne	.-16     	; 0xebe <pulse_deal+0x20>
  {
     if(logic_value()!= 1) //不是1
      return;
  }
  //执行1个0
  if(logic_value()!= 0) //不是0
     ece:	0e 94 21 07 	call	0xe42	; 0xe42 <logic_value>
     ed2:	88 23       	and	r24, r24
     ed4:	29 f5       	brne	.+74     	; 0xf20 <pulse_deal+0x82>
      return;
  //执行1个1
  if(logic_value()!= 1) //不是1
     ed6:	0e 94 21 07 	call	0xe42	; 0xe42 <logic_value>
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f5       	brne	.+66     	; 0xf20 <pulse_deal+0x82>
      return;
      
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
     ede:	10 92 3b 02 	sts	0x023B, r1
     ee2:	10 92 3a 02 	sts	0x023A, r1
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
  for(i=0; i<16;i++ )
  {
    if(logic_value() == 1)
    {
      ir_code |=(1<<i);
     eea:	01 e0       	ldi	r16, 0x01	; 1
     eec:	10 e0       	ldi	r17, 0x00	; 0
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
  for(i=0; i<16;i++ )
  {
    if(logic_value() == 1)
     eee:	0e 94 21 07 	call	0xe42	; 0xe42 <logic_value>
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	89 f4       	brne	.+34     	; 0xf18 <pulse_deal+0x7a>
    {
      ir_code |=(1<<i);
     ef6:	98 01       	movw	r18, r16
     ef8:	0c 2e       	mov	r0, r28
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <pulse_deal+0x62>
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <pulse_deal+0x5e>
     f04:	80 91 3a 02 	lds	r24, 0x023A
     f08:	90 91 3b 02 	lds	r25, 0x023B
     f0c:	82 2b       	or	r24, r18
     f0e:	93 2b       	or	r25, r19
     f10:	90 93 3b 02 	sts	0x023B, r25
     f14:	80 93 3a 02 	sts	0x023A, r24
      return;
      
  
  //解析遥控器编码中的command指令
  ir_code=0x00;//清零
  for(i=0; i<16;i++ )
     f18:	21 96       	adiw	r28, 0x01	; 1
     f1a:	c0 31       	cpi	r28, 0x10	; 16
     f1c:	d1 05       	cpc	r29, r1
     f1e:	39 f7       	brne	.-50     	; 0xeee <pulse_deal+0x50>
    if(logic_value() == 1)
    {
      ir_code |=(1<<i);
    }
  }
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <remote_decode>:
void remote_decode(void)//译码函数
{
     TCNT1=0X00;       
     f2a:	10 92 85 00 	sts	0x0085, r1
     f2e:	10 92 84 00 	sts	0x0084, r1
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <remote_decode+0x26>
     while(PINB&0X01)//是高就等待
     {
        if(TCNT1>=1563)  //当高电平持续时间超过100ms，表明此时没有按键按下
     f34:	80 91 84 00 	lds	r24, 0x0084
     f38:	90 91 85 00 	lds	r25, 0x0085
     f3c:	8b 51       	subi	r24, 0x1B	; 27
     f3e:	96 40       	sbci	r25, 0x06	; 6
     f40:	38 f0       	brcs	.+14     	; 0xf50 <remote_decode+0x26>
        {
             ir_code = 0xff00;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	9f ef       	ldi	r25, 0xFF	; 255
     f46:	90 93 3b 02 	sts	0x023B, r25
     f4a:	80 93 3a 02 	sts	0x023A, r24
     f4e:	08 95       	ret
  }
}
void remote_decode(void)//译码函数
{
     TCNT1=0X00;       
     while(PINB&0X01)//是高就等待
     f50:	18 99       	sbic	0x03, 0	; 3
     f52:	f0 cf       	rjmp	.-32     	; 0xf34 <remote_decode+0xa>
             return;
        }  
     }
     
     //如果高电平持续时间不超过100ms
     TCNT1=0X00;
     f54:	10 92 85 00 	sts	0x0085, r1
     f58:	10 92 84 00 	sts	0x0084, r1
     
     while(!(PINB&0X01)); //低等待
     f5c:	18 9b       	sbis	0x03, 0	; 3
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <remote_decode+0x32>
     Pulse_Width=TCNT1;
     f60:	80 91 84 00 	lds	r24, 0x0084
     f64:	90 91 85 00 	lds	r25, 0x0085
     f68:	90 93 39 02 	sts	0x0239, r25
     f6c:	80 93 38 02 	sts	0x0238, r24
     TCNT1=0;
     f70:	10 92 85 00 	sts	0x0085, r1
     f74:	10 92 84 00 	sts	0x0084, r1
     if(Pulse_Width>=140&&Pulse_Width<=141)//9ms
     f78:	8c 58       	subi	r24, 0x8C	; 140
     f7a:	90 40       	sbci	r25, 0x00	; 0
     f7c:	02 97       	sbiw	r24, 0x02	; 2
     f7e:	48 f5       	brcc	.+82     	; 0xfd2 <remote_decode+0xa8>
     {
         
         while(PINB&0X01);//是高就等待
     f80:	18 99       	sbic	0x03, 0	; 3
     f82:	fe cf       	rjmp	.-4      	; 0xf80 <remote_decode+0x56>
         Pulse_Width=TCNT1;
     f84:	20 91 84 00 	lds	r18, 0x0084
     f88:	30 91 85 00 	lds	r19, 0x0085
     f8c:	30 93 39 02 	sts	0x0239, r19
     f90:	20 93 38 02 	sts	0x0238, r18
         TCNT1=0;
     f94:	10 92 85 00 	sts	0x0085, r1
     f98:	10 92 84 00 	sts	0x0084, r1
         if(Pulse_Width>=68&&Pulse_Width<=72)//4.5ms
     f9c:	c9 01       	movw	r24, r18
     f9e:	84 54       	subi	r24, 0x44	; 68
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	05 97       	sbiw	r24, 0x05	; 5
     fa4:	18 f4       	brcc	.+6      	; 0xfac <remote_decode+0x82>
         {
            pulse_deal();
     fa6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pulse_deal>
     faa:	08 95       	ret
            return;
         }
         else if(Pulse_Width>=34&&Pulse_Width<=36)//2.25ms
     fac:	22 52       	subi	r18, 0x22	; 34
     fae:	30 40       	sbci	r19, 0x00	; 0
     fb0:	23 30       	cpi	r18, 0x03	; 3
     fb2:	31 05       	cpc	r19, r1
     fb4:	70 f4       	brcc	.+28     	; 0xfd2 <remote_decode+0xa8>
         {
            while(!(PINB&0X01));//低等待
     fb6:	18 9b       	sbis	0x03, 0	; 3
     fb8:	fe cf       	rjmp	.-4      	; 0xfb6 <remote_decode+0x8c>
            Pulse_Width=TCNT1;
     fba:	80 91 84 00 	lds	r24, 0x0084
     fbe:	90 91 85 00 	lds	r25, 0x0085
     fc2:	90 93 39 02 	sts	0x0239, r25
     fc6:	80 93 38 02 	sts	0x0238, r24
            TCNT1=0;
     fca:	10 92 85 00 	sts	0x0085, r1
     fce:	10 92 84 00 	sts	0x0084, r1
     fd2:	08 95       	ret

00000fd4 <buzzer>:
     }

}
//蜂鸣器
void buzzer(void)
{
     fd4:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd6:	35 e3       	ldi	r19, 0x35	; 53
     char k=0;
	 for(k=0;k<5;k++)
	 {
	     PORTB |= (1<<3);
     fd8:	25 ed       	ldi	r18, 0xD5	; 213
     fda:	2b 9a       	sbi	0x05, 3	; 5
     fdc:	83 2f       	mov	r24, r19
     fde:	8a 95       	dec	r24
     fe0:	f1 f7       	brne	.-4      	; 0xfde <buzzer+0xa>
		 _delay_us(10);
		 PORTB &= ~(1<<3);
     fe2:	2b 98       	cbi	0x05, 3	; 5
     fe4:	82 2f       	mov	r24, r18
     fe6:	8a 95       	dec	r24
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <buzzer+0x12>
}
//蜂鸣器
void buzzer(void)
{
     char k=0;
	 for(k=0;k<5;k++)
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	95 30       	cpi	r25, 0x05	; 5
     fee:	a9 f7       	brne	.-22     	; 0xfda <buzzer+0x6>
	     PORTB |= (1<<3);
		 _delay_us(10);
		 PORTB &= ~(1<<3);
		 _delay_us(40);//蜂鸣器响
	 }
}
     ff0:	08 95       	ret

00000ff2 <key_scan>:
//按键扫描
void key_scan(void)
{
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
  if(data[5]>4.50&&data[5]<6.00)//没有按键按下
     ffa:	e0 90 14 01 	lds	r14, 0x0114
     ffe:	f0 90 15 01 	lds	r15, 0x0115
    1002:	00 91 16 01 	lds	r16, 0x0116
    1006:	10 91 17 01 	lds	r17, 0x0117
    100a:	c8 01       	movw	r24, r16
    100c:	b7 01       	movw	r22, r14
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e9       	ldi	r20, 0x90	; 144
    1014:	50 e4       	ldi	r21, 0x40	; 64
    1016:	0e 94 cd 0b 	call	0x179a	; 0x179a <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	54 f4       	brge	.+20     	; 0x1032 <key_scan+0x40>
    101e:	c8 01       	movw	r24, r16
    1020:	b7 01       	movw	r22, r14
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 ec       	ldi	r20, 0xC0	; 192
    1028:	50 e4       	ldi	r21, 0x40	; 64
    102a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
    102e:	87 fd       	sbrc	r24, 7
    1030:	81 c0       	rjmp	.+258    	; 0x1134 <key_scan+0x142>
    return;
  else
  {
    if(data[5]>=0.00&&data[5]<0.50)//按键1按下
    1032:	c8 01       	movw	r24, r16
    1034:	b7 01       	movw	r22, r14
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__gesf2>
    1042:	88 23       	and	r24, r24
    1044:	d4 f0       	brlt	.+52     	; 0x107a <key_scan+0x88>
    1046:	c8 01       	movw	r24, r16
    1048:	b7 01       	movw	r22, r14
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
    1056:	88 23       	and	r24, r24
    1058:	84 f4       	brge	.+32     	; 0x107a <key_scan+0x88>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	9e e4       	ldi	r25, 0x4E	; 78
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <key_scan+0x6c>
    {
       _delay_ms(5);//延时消抖
      if(data[5]>=0.00&&data[5]<0.50)//按键1确实按下
      {
        buzzer();//蜂鸣器响
    1062:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <buzzer>
		key_1++;//按键1计数
    1066:	80 91 2a 02 	lds	r24, 0x022A
    106a:	98 2f       	mov	r25, r24
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	90 93 2a 02 	sts	0x022A, r25
        if(key_1>=1&&key_1<=5) 
    1072:	85 30       	cpi	r24, 0x05	; 5
    1074:	08 f0       	brcs	.+2      	; 0x1078 <key_scan+0x86>
    1076:	5e c0       	rjmp	.+188    	; 0x1134 <key_scan+0x142>
    1078:	27 c0       	rjmp	.+78     	; 0x10c8 <key_scan+0xd6>
		value_adjust(key_1);//寻线传感器的值调整
      }
    }
    else if(data[5]>=0.50&&data[5]<2.00)
    107a:	c8 01       	movw	r24, r16
    107c:	b7 01       	movw	r22, r14
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	5f e3       	ldi	r21, 0x3F	; 63
    1086:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__gesf2>
    108a:	88 23       	and	r24, r24
    108c:	3c f1       	brlt	.+78     	; 0x10dc <key_scan+0xea>
    108e:	c8 01       	movw	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e4       	ldi	r21, 0x40	; 64
    109a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	ec f4       	brge	.+58     	; 0x10dc <key_scan+0xea>
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	9e e4       	ldi	r25, 0x4E	; 78
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <key_scan+0xb4>
    {
       _delay_ms(5);//延时消抖
      if(data[5]>=0.50&&data[5]<2.00)
      {
	     buzzer();//蜂鸣器响
    10aa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <buzzer>
		 if(key_1>=1&&key_1<=5)
    10ae:	90 91 2a 02 	lds	r25, 0x022A
    10b2:	89 2f       	mov	r24, r25
    10b4:	81 50       	subi	r24, 0x01	; 1
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	58 f4       	brcc	.+22     	; 0x10d0 <key_scan+0xde>
        {
          value[key_1-1]++;//传感器的分辨轨迹的界限值加加（调整）
    10ba:	e9 2f       	mov	r30, r25
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e4 5d       	subi	r30, 0xD4	; 212
    10c0:	fd 4f       	sbci	r31, 0xFD	; 253
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 83       	st	Z, r24
          value_adjust(key_1);//跟实际值对比
    10c8:	89 2f       	mov	r24, r25
    10ca:	0e 94 ff 05 	call	0xbfe	; 0xbfe <value_adjust>
    10ce:	32 c0       	rjmp	.+100    	; 0x1134 <key_scan+0x142>
        }
     	else
		key_2++;//key2计数
    10d0:	80 91 2b 02 	lds	r24, 0x022B
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	80 93 2b 02 	sts	0x022B, r24
    10da:	2c c0       	rjmp	.+88     	; 0x1134 <key_scan+0x142>
      }
    }
    else if(data[5]>=2.00&&data[5]<3.00)
    10dc:	c8 01       	movw	r24, r16
    10de:	b7 01       	movw	r22, r14
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e4       	ldi	r21, 0x40	; 64
    10e8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__gesf2>
    10ec:	88 23       	and	r24, r24
    10ee:	14 f1       	brlt	.+68     	; 0x1134 <key_scan+0x142>
    10f0:	c8 01       	movw	r24, r16
    10f2:	b7 01       	movw	r22, r14
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e4       	ldi	r20, 0x40	; 64
    10fa:	50 e4       	ldi	r21, 0x40	; 64
    10fc:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ltsf2>
    1100:	88 23       	and	r24, r24
    1102:	c4 f4       	brge	.+48     	; 0x1134 <key_scan+0x142>
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	9e e4       	ldi	r25, 0x4E	; 78
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <key_scan+0x116>
    {
       _delay_ms(5);//延时消抖
      if(data[5]>=2.00&&data[5]<3.00)
      {
	     buzzer();//蜂鸣器响
    110c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <buzzer>
		 if(key_1>=1&&key_1<=5)
    1110:	90 91 2a 02 	lds	r25, 0x022A
    1114:	89 2f       	mov	r24, r25
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	85 30       	cpi	r24, 0x05	; 5
    111a:	38 f4       	brcc	.+14     	; 0x112a <key_scan+0x138>
        {
          value[key_1-1]--;//传感器的分辨轨迹的界限值减减（调整）
    111c:	e9 2f       	mov	r30, r25
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	e4 5d       	subi	r30, 0xD4	; 212
    1122:	fd 4f       	sbci	r31, 0xFD	; 253
    1124:	80 81       	ld	r24, Z
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	ce cf       	rjmp	.-100    	; 0x10c6 <key_scan+0xd4>
          value_adjust(key_1);//跟实际值对比
        }
		else
		key_3++;//key3计数
    112a:	80 91 2c 02 	lds	r24, 0x022C
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	80 93 2c 02 	sts	0x022C, r24
      }
    }
  }
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret

0000113e <key_deal>:
//按键值处理函数
void key_deal(void)
{

    if(key_1==6)//寻线
    113e:	80 91 2a 02 	lds	r24, 0x022A
    1142:	86 30       	cpi	r24, 0x06	; 6
    1144:	21 f4       	brne	.+8      	; 0x114e <key_deal+0x10>
	{
	   PORTB &=~(1<<5);//绿灯灭
    1146:	2d 98       	cbi	0x05, 5	; 5
       PORTB &=~(1<<4);//红灯灭
    1148:	2c 98       	cbi	0x05, 4	; 5
	   huntline_deal();//寻线
    114a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <huntline_deal>
	}
	if(key_2==1||key_3==1||key_3==3)//key_2=1避障行为，key_3==1袭击者，key_3==3小鸡行为
    114e:	80 91 2b 02 	lds	r24, 0x022B
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	31 f0       	breq	.+12     	; 0x1162 <key_deal+0x24>
    1156:	80 91 2c 02 	lds	r24, 0x022C
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	11 f0       	breq	.+4      	; 0x1162 <key_deal+0x24>
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	71 f4       	brne	.+28     	; 0x117e <key_deal+0x40>
	{
	    ADCSRA=0XC3;
    1162:	83 ec       	ldi	r24, 0xC3	; 195
    1164:	80 93 7a 00 	sts	0x007A, r24
	    PORTB |=(1<<4);
    1168:	2c 9a       	sbi	0x05, 4	; 5
	}
}
//引脚变化中断初始化函数
void pcint0_init(void)
{
	PCICR = 0X01;//使能第0组引脚变化中断
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 = 0X01;//使能第0组的第0个引脚变化中断
    1170:	80 93 6b 00 	sts	0x006B, r24
	if(key_2==1||key_3==1||key_3==3)//key_2=1避障行为，key_3==1袭击者，key_3==3小鸡行为
	{
	    ADCSRA=0XC3;
	    PORTB |=(1<<4);
	    pcint0_init();//引脚变化中断初始化
	    Obstacle_Avoidance();
    1174:	0e 94 9a 01 	call	0x334	; 0x334 <Obstacle_Avoidance>
        ADCSRA=0XCB;
    1178:	8b ec       	ldi	r24, 0xCB	; 203
    117a:	80 93 7a 00 	sts	0x007A, r24
	}
	if(key_2==3)//key_2==3寻光行为
    117e:	80 91 2b 02 	lds	r24, 0x022B
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	19 f4       	brne	.+6      	; 0x118c <key_deal+0x4e>
	{
	   PORTB |=(1<<4);
    1186:	2c 9a       	sbi	0x05, 4	; 5
	   hunt_light();//寻光
    1188:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <hunt_light>
	}  
	if(key_3==5)//遥控
    118c:	90 91 2c 02 	lds	r25, 0x022C
    1190:	95 30       	cpi	r25, 0x05	; 5
    1192:	b9 f4       	brne	.+46     	; 0x11c2 <key_deal+0x84>
    {
	    ADCSRA=0XC3;
    1194:	83 ec       	ldi	r24, 0xC3	; 195
    1196:	80 93 7a 00 	sts	0x007A, r24
	    PORTB |=(1<<4);
    119a:	2c 9a       	sbi	0x05, 4	; 5
//遥控

//设置定时器T1为定时模式
void timer1_init(void)
{
  TCCR1A = 0X00; 
    119c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 0X05;//给定时器时钟源  
    11a0:	90 93 81 00 	sts	0x0081, r25
  TCCR1C = 0X00;
    11a4:	10 92 82 00 	sts	0x0082, r1
  TCNT1 = 0X00;
    11a8:	10 92 85 00 	sts	0x0085, r1
    11ac:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = 0X00;//禁止定时器溢出中断
    11b0:	10 92 6f 00 	sts	0x006F, r1
	if(key_3==5)//遥控
    {
	    ADCSRA=0XC3;
	    PORTB |=(1<<4);
	    timer1_init();//定时器初始化函数
	    remote_decode();  //译码
    11b4:	0e 94 95 07 	call	0xf2a	; 0xf2a <remote_decode>
	    remote_deal();   //执行译码结果
    11b8:	0e 94 dd 06 	call	0xdba	; 0xdba <remote_deal>
		ADCSRA=0XCB;
    11bc:	8b ec       	ldi	r24, 0xCB	; 203
    11be:	80 93 7a 00 	sts	0x007A, r24
    } 
	if(key_1==7||key_2==2||key_2==4||key_3==2||key_3==4||key_3==6)
    11c2:	80 91 2a 02 	lds	r24, 0x022A
    11c6:	87 30       	cpi	r24, 0x07	; 7
    11c8:	71 f0       	breq	.+28     	; 0x11e6 <key_deal+0xa8>
    11ca:	80 91 2b 02 	lds	r24, 0x022B
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	51 f0       	breq	.+20     	; 0x11e6 <key_deal+0xa8>
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	41 f0       	breq	.+16     	; 0x11e6 <key_deal+0xa8>
    11d6:	80 91 2c 02 	lds	r24, 0x022C
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	21 f0       	breq	.+8      	; 0x11e6 <key_deal+0xa8>
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <key_deal+0xa8>
    11e2:	86 30       	cpi	r24, 0x06	; 6
    11e4:	c9 f4       	brne	.+50     	; 0x1218 <key_deal+0xda>
	{
	   //按键值清零
	    key_1=0;
    11e6:	10 92 2a 02 	sts	0x022A, r1
	    if(key_2==4)
    11ea:	80 91 2b 02 	lds	r24, 0x022B
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <key_deal+0xb8>
	    key_2=0;
    11f2:	10 92 2b 02 	sts	0x022B, r1
	    if(key_3==6)
    11f6:	80 91 2c 02 	lds	r24, 0x022C
    11fa:	86 30       	cpi	r24, 0x06	; 6
    11fc:	11 f4       	brne	.+4      	; 0x1202 <key_deal+0xc4>
	    key_3=0;
    11fe:	10 92 2c 02 	sts	0x022C, r1
        PORTB &=~(1<<4);
    1202:	2c 98       	cbi	0x05, 4	; 5
		Motor_Control(FORW,0,FORW,0);//停止
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	0e 94 5b 00 	call	0xb6	; 0xb6 <Motor_Control>
    1218:	08 95       	ret

0000121a <main>:
	}
}
//主函数
int main(void)
{
    DDRD = 0XF2;//设置PORTD口引脚
    121a:	82 ef       	ldi	r24, 0xF2	; 242
    121c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<0)|(1<<2)|(1<<3));//设置PORTD口输入引脚的上拉电阻有效
    121e:	8b b1       	in	r24, 0x0b	; 11
    1220:	8d 60       	ori	r24, 0x0D	; 13
    1222:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0XFE;//设置PORTB口引脚
    1224:	8e ef       	ldi	r24, 0xFE	; 254
    1226:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<0);//设置PORTB口输入引脚的上拉电阻有效
    1228:	28 9a       	sbi	0x05, 0	; 5
int    Pulse_Width=0;//存储脉宽 
int    ir_code=0x00;   //命令值
//pwm初始化子函数
void pwm_init(void)
{ 
	TCCR0A = 0XA3;      
    122a:	83 ea       	ldi	r24, 0xA3	; 163
    122c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0X03;//时钟源设置为clk/64
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0X00; //初值设置为0
    1232:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = 0X00;//禁止中断    
    1234:	10 92 6e 00 	sts	0x006E, r1
    DDRD = 0XF2;//设置PORTD口引脚
	PORTD |= ((1<<0)|(1<<2)|(1<<3));//设置PORTD口输入引脚的上拉电阻有效
	DDRB = 0XFE;//设置PORTB口引脚
	PORTB |= (1<<0);//设置PORTB口输入引脚的上拉电阻有效
    pwm_init();//PWM脉冲初始化
	adc_init(channel);//ad转换初始化
    1238:	80 91 20 01 	lds	r24, 0x0120
}
//ad转换初始化函数
void adc_init(int channel)
{
    //设置ad转换寄存器
	ADMUX =channel;
    123c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =0xcb; 
    1240:	8b ec       	ldi	r24, 0xCB	; 203
    1242:	80 93 7a 00 	sts	0x007A, r24
	PORTD |= ((1<<0)|(1<<2)|(1<<3));//设置PORTD口输入引脚的上拉电阻有效
	DDRB = 0XFE;//设置PORTB口引脚
	PORTB |= (1<<0);//设置PORTB口输入引脚的上拉电阻有效
    pwm_init();//PWM脉冲初始化
	adc_init(channel);//ad转换初始化
	sei();//全局中断允许
    1246:	78 94       	sei
	while(1)
	{
	   key_scan();//扫描按键
    1248:	0e 94 f9 07 	call	0xff2	; 0xff2 <key_scan>
	   key_deal();//按键处理
    124c:	0e 94 9f 08 	call	0x113e	; 0x113e <key_deal>
    1250:	fb cf       	rjmp	.-10     	; 0x1248 <main+0x2e>

00001252 <_fpadd_parts>:
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e2       	ldi	r30, 0x2F	; 47
    1258:	f9 e0       	ldi	r31, 0x09	; 9
    125a:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__>
    125e:	dc 01       	movw	r26, r24
    1260:	2b 01       	movw	r4, r22
    1262:	fa 01       	movw	r30, r20
    1264:	9c 91       	ld	r25, X
    1266:	92 30       	cpi	r25, 0x02	; 2
    1268:	08 f4       	brcc	.+2      	; 0x126c <_fpadd_parts+0x1a>
    126a:	39 c1       	rjmp	.+626    	; 0x14de <_fpadd_parts+0x28c>
    126c:	eb 01       	movw	r28, r22
    126e:	88 81       	ld	r24, Y
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	08 f4       	brcc	.+2      	; 0x1276 <_fpadd_parts+0x24>
    1274:	33 c1       	rjmp	.+614    	; 0x14dc <_fpadd_parts+0x28a>
    1276:	94 30       	cpi	r25, 0x04	; 4
    1278:	69 f4       	brne	.+26     	; 0x1294 <_fpadd_parts+0x42>
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	09 f0       	breq	.+2      	; 0x1280 <_fpadd_parts+0x2e>
    127e:	2f c1       	rjmp	.+606    	; 0x14de <_fpadd_parts+0x28c>
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	9c 91       	ld	r25, X
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	98 17       	cp	r25, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <_fpadd_parts+0x3c>
    128c:	28 c1       	rjmp	.+592    	; 0x14de <_fpadd_parts+0x28c>
    128e:	a1 e2       	ldi	r26, 0x21	; 33
    1290:	b1 e0       	ldi	r27, 0x01	; 1
    1292:	25 c1       	rjmp	.+586    	; 0x14de <_fpadd_parts+0x28c>
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	09 f4       	brne	.+2      	; 0x129a <_fpadd_parts+0x48>
    1298:	21 c1       	rjmp	.+578    	; 0x14dc <_fpadd_parts+0x28a>
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	a9 f4       	brne	.+42     	; 0x12c8 <_fpadd_parts+0x76>
    129e:	92 30       	cpi	r25, 0x02	; 2
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <_fpadd_parts+0x52>
    12a2:	1d c1       	rjmp	.+570    	; 0x14de <_fpadd_parts+0x28c>
    12a4:	9a 01       	movw	r18, r20
    12a6:	ad 01       	movw	r20, r26
    12a8:	88 e0       	ldi	r24, 0x08	; 8
    12aa:	ea 01       	movw	r28, r20
    12ac:	09 90       	ld	r0, Y+
    12ae:	ae 01       	movw	r20, r28
    12b0:	e9 01       	movw	r28, r18
    12b2:	09 92       	st	Y+, r0
    12b4:	9e 01       	movw	r18, r28
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	c1 f7       	brne	.-16     	; 0x12aa <_fpadd_parts+0x58>
    12ba:	e2 01       	movw	r28, r4
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	11 96       	adiw	r26, 0x01	; 1
    12c0:	9c 91       	ld	r25, X
    12c2:	89 23       	and	r24, r25
    12c4:	81 83       	std	Z+1, r24	; 0x01
    12c6:	08 c1       	rjmp	.+528    	; 0x14d8 <_fpadd_parts+0x286>
    12c8:	92 30       	cpi	r25, 0x02	; 2
    12ca:	09 f4       	brne	.+2      	; 0x12ce <_fpadd_parts+0x7c>
    12cc:	07 c1       	rjmp	.+526    	; 0x14dc <_fpadd_parts+0x28a>
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	2d 90       	ld	r2, X+
    12d2:	3c 90       	ld	r3, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	eb 01       	movw	r28, r22
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	ad 90       	ld	r10, X+
    12e0:	bd 90       	ld	r11, X+
    12e2:	cd 90       	ld	r12, X+
    12e4:	dc 90       	ld	r13, X
    12e6:	17 97       	sbiw	r26, 0x07	; 7
    12e8:	ec 80       	ldd	r14, Y+4	; 0x04
    12ea:	fd 80       	ldd	r15, Y+5	; 0x05
    12ec:	0e 81       	ldd	r16, Y+6	; 0x06
    12ee:	1f 81       	ldd	r17, Y+7	; 0x07
    12f0:	91 01       	movw	r18, r2
    12f2:	28 1b       	sub	r18, r24
    12f4:	39 0b       	sbc	r19, r25
    12f6:	b9 01       	movw	r22, r18
    12f8:	37 ff       	sbrs	r19, 7
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <_fpadd_parts+0xb2>
    12fc:	66 27       	eor	r22, r22
    12fe:	77 27       	eor	r23, r23
    1300:	62 1b       	sub	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	60 32       	cpi	r22, 0x20	; 32
    1306:	71 05       	cpc	r23, r1
    1308:	0c f0       	brlt	.+2      	; 0x130c <_fpadd_parts+0xba>
    130a:	61 c0       	rjmp	.+194    	; 0x13ce <_fpadd_parts+0x17c>
    130c:	12 16       	cp	r1, r18
    130e:	13 06       	cpc	r1, r19
    1310:	6c f5       	brge	.+90     	; 0x136c <_fpadd_parts+0x11a>
    1312:	37 01       	movw	r6, r14
    1314:	48 01       	movw	r8, r16
    1316:	06 2e       	mov	r0, r22
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <_fpadd_parts+0xd0>
    131a:	96 94       	lsr	r9
    131c:	87 94       	ror	r8
    131e:	77 94       	ror	r7
    1320:	67 94       	ror	r6
    1322:	0a 94       	dec	r0
    1324:	d2 f7       	brpl	.-12     	; 0x131a <_fpadd_parts+0xc8>
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <_fpadd_parts+0xe6>
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	44 1f       	adc	r20, r20
    1336:	55 1f       	adc	r21, r21
    1338:	6a 95       	dec	r22
    133a:	d2 f7       	brpl	.-12     	; 0x1330 <_fpadd_parts+0xde>
    133c:	21 50       	subi	r18, 0x01	; 1
    133e:	30 40       	sbci	r19, 0x00	; 0
    1340:	40 40       	sbci	r20, 0x00	; 0
    1342:	50 40       	sbci	r21, 0x00	; 0
    1344:	2e 21       	and	r18, r14
    1346:	3f 21       	and	r19, r15
    1348:	40 23       	and	r20, r16
    134a:	51 23       	and	r21, r17
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	41 05       	cpc	r20, r1
    1352:	51 05       	cpc	r21, r1
    1354:	21 f0       	breq	.+8      	; 0x135e <_fpadd_parts+0x10c>
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	79 01       	movw	r14, r18
    1360:	8a 01       	movw	r16, r20
    1362:	e6 28       	or	r14, r6
    1364:	f7 28       	or	r15, r7
    1366:	08 29       	or	r16, r8
    1368:	19 29       	or	r17, r9
    136a:	3c c0       	rjmp	.+120    	; 0x13e4 <_fpadd_parts+0x192>
    136c:	23 2b       	or	r18, r19
    136e:	d1 f1       	breq	.+116    	; 0x13e4 <_fpadd_parts+0x192>
    1370:	26 0e       	add	r2, r22
    1372:	37 1e       	adc	r3, r23
    1374:	35 01       	movw	r6, r10
    1376:	46 01       	movw	r8, r12
    1378:	06 2e       	mov	r0, r22
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <_fpadd_parts+0x132>
    137c:	96 94       	lsr	r9
    137e:	87 94       	ror	r8
    1380:	77 94       	ror	r7
    1382:	67 94       	ror	r6
    1384:	0a 94       	dec	r0
    1386:	d2 f7       	brpl	.-12     	; 0x137c <_fpadd_parts+0x12a>
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	04 c0       	rjmp	.+8      	; 0x139a <_fpadd_parts+0x148>
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	44 1f       	adc	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	6a 95       	dec	r22
    139c:	d2 f7       	brpl	.-12     	; 0x1392 <_fpadd_parts+0x140>
    139e:	21 50       	subi	r18, 0x01	; 1
    13a0:	30 40       	sbci	r19, 0x00	; 0
    13a2:	40 40       	sbci	r20, 0x00	; 0
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	2a 21       	and	r18, r10
    13a8:	3b 21       	and	r19, r11
    13aa:	4c 21       	and	r20, r12
    13ac:	5d 21       	and	r21, r13
    13ae:	21 15       	cp	r18, r1
    13b0:	31 05       	cpc	r19, r1
    13b2:	41 05       	cpc	r20, r1
    13b4:	51 05       	cpc	r21, r1
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <_fpadd_parts+0x16e>
    13b8:	21 e0       	ldi	r18, 0x01	; 1
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	59 01       	movw	r10, r18
    13c2:	6a 01       	movw	r12, r20
    13c4:	a6 28       	or	r10, r6
    13c6:	b7 28       	or	r11, r7
    13c8:	c8 28       	or	r12, r8
    13ca:	d9 28       	or	r13, r9
    13cc:	0b c0       	rjmp	.+22     	; 0x13e4 <_fpadd_parts+0x192>
    13ce:	82 15       	cp	r24, r2
    13d0:	93 05       	cpc	r25, r3
    13d2:	2c f0       	brlt	.+10     	; 0x13de <_fpadd_parts+0x18c>
    13d4:	1c 01       	movw	r2, r24
    13d6:	aa 24       	eor	r10, r10
    13d8:	bb 24       	eor	r11, r11
    13da:	65 01       	movw	r12, r10
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <_fpadd_parts+0x192>
    13de:	ee 24       	eor	r14, r14
    13e0:	ff 24       	eor	r15, r15
    13e2:	87 01       	movw	r16, r14
    13e4:	11 96       	adiw	r26, 0x01	; 1
    13e6:	9c 91       	ld	r25, X
    13e8:	d2 01       	movw	r26, r4
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	8c 91       	ld	r24, X
    13ee:	98 17       	cp	r25, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <_fpadd_parts+0x1a2>
    13f2:	45 c0       	rjmp	.+138    	; 0x147e <_fpadd_parts+0x22c>
    13f4:	99 23       	and	r25, r25
    13f6:	39 f0       	breq	.+14     	; 0x1406 <_fpadd_parts+0x1b4>
    13f8:	a8 01       	movw	r20, r16
    13fa:	97 01       	movw	r18, r14
    13fc:	2a 19       	sub	r18, r10
    13fe:	3b 09       	sbc	r19, r11
    1400:	4c 09       	sbc	r20, r12
    1402:	5d 09       	sbc	r21, r13
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <_fpadd_parts+0x1c0>
    1406:	a6 01       	movw	r20, r12
    1408:	95 01       	movw	r18, r10
    140a:	2e 19       	sub	r18, r14
    140c:	3f 09       	sbc	r19, r15
    140e:	40 0b       	sbc	r20, r16
    1410:	51 0b       	sbc	r21, r17
    1412:	57 fd       	sbrc	r21, 7
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <_fpadd_parts+0x1d4>
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	33 82       	std	Z+3, r3	; 0x03
    141a:	22 82       	std	Z+2, r2	; 0x02
    141c:	24 83       	std	Z+4, r18	; 0x04
    141e:	35 83       	std	Z+5, r19	; 0x05
    1420:	46 83       	std	Z+6, r20	; 0x06
    1422:	57 83       	std	Z+7, r21	; 0x07
    1424:	1d c0       	rjmp	.+58     	; 0x1460 <_fpadd_parts+0x20e>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	81 83       	std	Z+1, r24	; 0x01
    142a:	33 82       	std	Z+3, r3	; 0x03
    142c:	22 82       	std	Z+2, r2	; 0x02
    142e:	88 27       	eor	r24, r24
    1430:	99 27       	eor	r25, r25
    1432:	dc 01       	movw	r26, r24
    1434:	82 1b       	sub	r24, r18
    1436:	93 0b       	sbc	r25, r19
    1438:	a4 0b       	sbc	r26, r20
    143a:	b5 0b       	sbc	r27, r21
    143c:	84 83       	std	Z+4, r24	; 0x04
    143e:	95 83       	std	Z+5, r25	; 0x05
    1440:	a6 83       	std	Z+6, r26	; 0x06
    1442:	b7 83       	std	Z+7, r27	; 0x07
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <_fpadd_parts+0x20e>
    1446:	22 0f       	add	r18, r18
    1448:	33 1f       	adc	r19, r19
    144a:	44 1f       	adc	r20, r20
    144c:	55 1f       	adc	r21, r21
    144e:	24 83       	std	Z+4, r18	; 0x04
    1450:	35 83       	std	Z+5, r19	; 0x05
    1452:	46 83       	std	Z+6, r20	; 0x06
    1454:	57 83       	std	Z+7, r21	; 0x07
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	93 83       	std	Z+3, r25	; 0x03
    145e:	82 83       	std	Z+2, r24	; 0x02
    1460:	24 81       	ldd	r18, Z+4	; 0x04
    1462:	35 81       	ldd	r19, Z+5	; 0x05
    1464:	46 81       	ldd	r20, Z+6	; 0x06
    1466:	57 81       	ldd	r21, Z+7	; 0x07
    1468:	da 01       	movw	r26, r20
    146a:	c9 01       	movw	r24, r18
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	a1 09       	sbc	r26, r1
    1470:	b1 09       	sbc	r27, r1
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	af 4f       	sbci	r26, 0xFF	; 255
    1478:	bf 43       	sbci	r27, 0x3F	; 63
    147a:	28 f3       	brcs	.-54     	; 0x1446 <_fpadd_parts+0x1f4>
    147c:	0b c0       	rjmp	.+22     	; 0x1494 <_fpadd_parts+0x242>
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	33 82       	std	Z+3, r3	; 0x03
    1482:	22 82       	std	Z+2, r2	; 0x02
    1484:	ea 0c       	add	r14, r10
    1486:	fb 1c       	adc	r15, r11
    1488:	0c 1d       	adc	r16, r12
    148a:	1d 1d       	adc	r17, r13
    148c:	e4 82       	std	Z+4, r14	; 0x04
    148e:	f5 82       	std	Z+5, r15	; 0x05
    1490:	06 83       	std	Z+6, r16	; 0x06
    1492:	17 83       	std	Z+7, r17	; 0x07
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	80 83       	st	Z, r24
    1498:	24 81       	ldd	r18, Z+4	; 0x04
    149a:	35 81       	ldd	r19, Z+5	; 0x05
    149c:	46 81       	ldd	r20, Z+6	; 0x06
    149e:	57 81       	ldd	r21, Z+7	; 0x07
    14a0:	57 ff       	sbrs	r21, 7
    14a2:	1a c0       	rjmp	.+52     	; 0x14d8 <_fpadd_parts+0x286>
    14a4:	c9 01       	movw	r24, r18
    14a6:	aa 27       	eor	r26, r26
    14a8:	97 fd       	sbrc	r25, 7
    14aa:	a0 95       	com	r26
    14ac:	ba 2f       	mov	r27, r26
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	a0 70       	andi	r26, 0x00	; 0
    14b4:	b0 70       	andi	r27, 0x00	; 0
    14b6:	56 95       	lsr	r21
    14b8:	47 95       	ror	r20
    14ba:	37 95       	ror	r19
    14bc:	27 95       	ror	r18
    14be:	82 2b       	or	r24, r18
    14c0:	93 2b       	or	r25, r19
    14c2:	a4 2b       	or	r26, r20
    14c4:	b5 2b       	or	r27, r21
    14c6:	84 83       	std	Z+4, r24	; 0x04
    14c8:	95 83       	std	Z+5, r25	; 0x05
    14ca:	a6 83       	std	Z+6, r26	; 0x06
    14cc:	b7 83       	std	Z+7, r27	; 0x07
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	93 83       	std	Z+3, r25	; 0x03
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	df 01       	movw	r26, r30
    14da:	01 c0       	rjmp	.+2      	; 0x14de <_fpadd_parts+0x28c>
    14dc:	d2 01       	movw	r26, r4
    14de:	cd 01       	movw	r24, r26
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	e2 e1       	ldi	r30, 0x12	; 18
    14e6:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__>

000014ea <__subsf3>:
    14ea:	a0 e2       	ldi	r26, 0x20	; 32
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e7       	ldi	r30, 0x7B	; 123
    14f0:	fa e0       	ldi	r31, 0x0A	; 10
    14f2:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
    14f6:	69 83       	std	Y+1, r22	; 0x01
    14f8:	7a 83       	std	Y+2, r23	; 0x02
    14fa:	8b 83       	std	Y+3, r24	; 0x03
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	2d 83       	std	Y+5, r18	; 0x05
    1500:	3e 83       	std	Y+6, r19	; 0x06
    1502:	4f 83       	std	Y+7, r20	; 0x07
    1504:	58 87       	std	Y+8, r21	; 0x08
    1506:	e9 e0       	ldi	r30, 0x09	; 9
    1508:	ee 2e       	mov	r14, r30
    150a:	f1 2c       	mov	r15, r1
    150c:	ec 0e       	add	r14, r28
    150e:	fd 1e       	adc	r15, r29
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	b7 01       	movw	r22, r14
    1516:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    151a:	8e 01       	movw	r16, r28
    151c:	0f 5e       	subi	r16, 0xEF	; 239
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	05 96       	adiw	r24, 0x05	; 5
    1524:	b8 01       	movw	r22, r16
    1526:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    152a:	8a 89       	ldd	r24, Y+18	; 0x12
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	89 27       	eor	r24, r25
    1530:	8a 8b       	std	Y+18, r24	; 0x12
    1532:	c7 01       	movw	r24, r14
    1534:	b8 01       	movw	r22, r16
    1536:	ae 01       	movw	r20, r28
    1538:	47 5e       	subi	r20, 0xE7	; 231
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	0e 94 29 09 	call	0x1252	; 0x1252 <_fpadd_parts>
    1540:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    1544:	a0 96       	adiw	r28, 0x20	; 32
    1546:	e6 e0       	ldi	r30, 0x06	; 6
    1548:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

0000154c <__addsf3>:
    154c:	a0 e2       	ldi	r26, 0x20	; 32
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ec ea       	ldi	r30, 0xAC	; 172
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
    1558:	69 83       	std	Y+1, r22	; 0x01
    155a:	7a 83       	std	Y+2, r23	; 0x02
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	2d 83       	std	Y+5, r18	; 0x05
    1562:	3e 83       	std	Y+6, r19	; 0x06
    1564:	4f 83       	std	Y+7, r20	; 0x07
    1566:	58 87       	std	Y+8, r21	; 0x08
    1568:	f9 e0       	ldi	r31, 0x09	; 9
    156a:	ef 2e       	mov	r14, r31
    156c:	f1 2c       	mov	r15, r1
    156e:	ec 0e       	add	r14, r28
    1570:	fd 1e       	adc	r15, r29
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	b7 01       	movw	r22, r14
    1578:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    157c:	8e 01       	movw	r16, r28
    157e:	0f 5e       	subi	r16, 0xEF	; 239
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	ce 01       	movw	r24, r28
    1584:	05 96       	adiw	r24, 0x05	; 5
    1586:	b8 01       	movw	r22, r16
    1588:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    158c:	c7 01       	movw	r24, r14
    158e:	b8 01       	movw	r22, r16
    1590:	ae 01       	movw	r20, r28
    1592:	47 5e       	subi	r20, 0xE7	; 231
    1594:	5f 4f       	sbci	r21, 0xFF	; 255
    1596:	0e 94 29 09 	call	0x1252	; 0x1252 <_fpadd_parts>
    159a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    159e:	a0 96       	adiw	r28, 0x20	; 32
    15a0:	e6 e0       	ldi	r30, 0x06	; 6
    15a2:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

000015a6 <__mulsf3>:
    15a6:	a0 e2       	ldi	r26, 0x20	; 32
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e9 ed       	ldi	r30, 0xD9	; 217
    15ac:	fa e0       	ldi	r31, 0x0A	; 10
    15ae:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__>
    15b2:	69 83       	std	Y+1, r22	; 0x01
    15b4:	7a 83       	std	Y+2, r23	; 0x02
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	2d 83       	std	Y+5, r18	; 0x05
    15bc:	3e 83       	std	Y+6, r19	; 0x06
    15be:	4f 83       	std	Y+7, r20	; 0x07
    15c0:	58 87       	std	Y+8, r21	; 0x08
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	be 01       	movw	r22, r28
    15c8:	67 5f       	subi	r22, 0xF7	; 247
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    15d0:	ce 01       	movw	r24, r28
    15d2:	05 96       	adiw	r24, 0x05	; 5
    15d4:	be 01       	movw	r22, r28
    15d6:	6f 5e       	subi	r22, 0xEF	; 239
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    15de:	99 85       	ldd	r25, Y+9	; 0x09
    15e0:	92 30       	cpi	r25, 0x02	; 2
    15e2:	88 f0       	brcs	.+34     	; 0x1606 <__mulsf3+0x60>
    15e4:	89 89       	ldd	r24, Y+17	; 0x11
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	c8 f0       	brcs	.+50     	; 0x161c <__mulsf3+0x76>
    15ea:	94 30       	cpi	r25, 0x04	; 4
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <__mulsf3+0x4e>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	51 f4       	brne	.+20     	; 0x1606 <__mulsf3+0x60>
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <__mulsf3+0x56>
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	29 f4       	brne	.+10     	; 0x1602 <__mulsf3+0x5c>
    15f8:	92 30       	cpi	r25, 0x02	; 2
    15fa:	81 f4       	brne	.+32     	; 0x161c <__mulsf3+0x76>
    15fc:	81 e2       	ldi	r24, 0x21	; 33
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	c6 c0       	rjmp	.+396    	; 0x178e <__mulsf3+0x1e8>
    1602:	92 30       	cpi	r25, 0x02	; 2
    1604:	49 f4       	brne	.+18     	; 0x1618 <__mulsf3+0x72>
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	8a 89       	ldd	r24, Y+18	; 0x12
    160c:	98 13       	cpse	r25, r24
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	2a 87       	std	Y+10, r18	; 0x0a
    1612:	ce 01       	movw	r24, r28
    1614:	09 96       	adiw	r24, 0x09	; 9
    1616:	bb c0       	rjmp	.+374    	; 0x178e <__mulsf3+0x1e8>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	49 f4       	brne	.+18     	; 0x162e <__mulsf3+0x88>
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	8a 89       	ldd	r24, Y+18	; 0x12
    1622:	98 13       	cpse	r25, r24
    1624:	21 e0       	ldi	r18, 0x01	; 1
    1626:	2a 8b       	std	Y+18, r18	; 0x12
    1628:	ce 01       	movw	r24, r28
    162a:	41 96       	adiw	r24, 0x11	; 17
    162c:	b0 c0       	rjmp	.+352    	; 0x178e <__mulsf3+0x1e8>
    162e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1630:	3e 84       	ldd	r3, Y+14	; 0x0e
    1632:	4f 84       	ldd	r4, Y+15	; 0x0f
    1634:	58 88       	ldd	r5, Y+16	; 0x10
    1636:	6d 88       	ldd	r6, Y+21	; 0x15
    1638:	7e 88       	ldd	r7, Y+22	; 0x16
    163a:	8f 88       	ldd	r8, Y+23	; 0x17
    163c:	98 8c       	ldd	r9, Y+24	; 0x18
    163e:	ee 24       	eor	r14, r14
    1640:	ff 24       	eor	r15, r15
    1642:	87 01       	movw	r16, r14
    1644:	aa 24       	eor	r10, r10
    1646:	bb 24       	eor	r11, r11
    1648:	65 01       	movw	r12, r10
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	e0 e0       	ldi	r30, 0x00	; 0
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	c1 01       	movw	r24, r2
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	89 2b       	or	r24, r25
    165e:	e9 f0       	breq	.+58     	; 0x169a <__mulsf3+0xf4>
    1660:	e6 0c       	add	r14, r6
    1662:	f7 1c       	adc	r15, r7
    1664:	08 1d       	adc	r16, r8
    1666:	19 1d       	adc	r17, r9
    1668:	9a 01       	movw	r18, r20
    166a:	ab 01       	movw	r20, r22
    166c:	2a 0d       	add	r18, r10
    166e:	3b 1d       	adc	r19, r11
    1670:	4c 1d       	adc	r20, r12
    1672:	5d 1d       	adc	r21, r13
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e6 14       	cp	r14, r6
    167e:	f7 04       	cpc	r15, r7
    1680:	08 05       	cpc	r16, r8
    1682:	19 05       	cpc	r17, r9
    1684:	20 f4       	brcc	.+8      	; 0x168e <__mulsf3+0xe8>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ba 01       	movw	r22, r20
    1690:	a9 01       	movw	r20, r18
    1692:	48 0f       	add	r20, r24
    1694:	59 1f       	adc	r21, r25
    1696:	6a 1f       	adc	r22, r26
    1698:	7b 1f       	adc	r23, r27
    169a:	aa 0c       	add	r10, r10
    169c:	bb 1c       	adc	r11, r11
    169e:	cc 1c       	adc	r12, r12
    16a0:	dd 1c       	adc	r13, r13
    16a2:	97 fe       	sbrs	r9, 7
    16a4:	08 c0       	rjmp	.+16     	; 0x16b6 <__mulsf3+0x110>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	a8 2a       	or	r10, r24
    16b0:	b9 2a       	or	r11, r25
    16b2:	ca 2a       	or	r12, r26
    16b4:	db 2a       	or	r13, r27
    16b6:	31 96       	adiw	r30, 0x01	; 1
    16b8:	e0 32       	cpi	r30, 0x20	; 32
    16ba:	f1 05       	cpc	r31, r1
    16bc:	49 f0       	breq	.+18     	; 0x16d0 <__mulsf3+0x12a>
    16be:	66 0c       	add	r6, r6
    16c0:	77 1c       	adc	r7, r7
    16c2:	88 1c       	adc	r8, r8
    16c4:	99 1c       	adc	r9, r9
    16c6:	56 94       	lsr	r5
    16c8:	47 94       	ror	r4
    16ca:	37 94       	ror	r3
    16cc:	27 94       	ror	r2
    16ce:	c3 cf       	rjmp	.-122    	; 0x1656 <__mulsf3+0xb0>
    16d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    16d2:	ea 89       	ldd	r30, Y+18	; 0x12
    16d4:	2b 89       	ldd	r18, Y+19	; 0x13
    16d6:	3c 89       	ldd	r19, Y+20	; 0x14
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	28 0f       	add	r18, r24
    16de:	39 1f       	adc	r19, r25
    16e0:	2e 5f       	subi	r18, 0xFE	; 254
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	17 c0       	rjmp	.+46     	; 0x1714 <__mulsf3+0x16e>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	90 70       	andi	r25, 0x00	; 0
    16ec:	89 2b       	or	r24, r25
    16ee:	61 f0       	breq	.+24     	; 0x1708 <__mulsf3+0x162>
    16f0:	16 95       	lsr	r17
    16f2:	07 95       	ror	r16
    16f4:	f7 94       	ror	r15
    16f6:	e7 94       	ror	r14
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e8       	ldi	r27, 0x80	; 128
    1700:	e8 2a       	or	r14, r24
    1702:	f9 2a       	or	r15, r25
    1704:	0a 2b       	or	r16, r26
    1706:	1b 2b       	or	r17, r27
    1708:	76 95       	lsr	r23
    170a:	67 95       	ror	r22
    170c:	57 95       	ror	r21
    170e:	47 95       	ror	r20
    1710:	2f 5f       	subi	r18, 0xFF	; 255
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	77 fd       	sbrc	r23, 7
    1716:	e7 cf       	rjmp	.-50     	; 0x16e6 <__mulsf3+0x140>
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <__mulsf3+0x18c>
    171a:	44 0f       	add	r20, r20
    171c:	55 1f       	adc	r21, r21
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	17 fd       	sbrc	r17, 7
    1724:	41 60       	ori	r20, 0x01	; 1
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	21 50       	subi	r18, 0x01	; 1
    1730:	30 40       	sbci	r19, 0x00	; 0
    1732:	40 30       	cpi	r20, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	59 07       	cpc	r21, r25
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	69 07       	cpc	r22, r25
    173c:	90 e4       	ldi	r25, 0x40	; 64
    173e:	79 07       	cpc	r23, r25
    1740:	60 f3       	brcs	.-40     	; 0x171a <__mulsf3+0x174>
    1742:	2b 8f       	std	Y+27, r18	; 0x1b
    1744:	3c 8f       	std	Y+28, r19	; 0x1c
    1746:	db 01       	movw	r26, r22
    1748:	ca 01       	movw	r24, r20
    174a:	8f 77       	andi	r24, 0x7F	; 127
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	a0 70       	andi	r26, 0x00	; 0
    1750:	b0 70       	andi	r27, 0x00	; 0
    1752:	80 34       	cpi	r24, 0x40	; 64
    1754:	91 05       	cpc	r25, r1
    1756:	a1 05       	cpc	r26, r1
    1758:	b1 05       	cpc	r27, r1
    175a:	61 f4       	brne	.+24     	; 0x1774 <__mulsf3+0x1ce>
    175c:	47 fd       	sbrc	r20, 7
    175e:	0a c0       	rjmp	.+20     	; 0x1774 <__mulsf3+0x1ce>
    1760:	e1 14       	cp	r14, r1
    1762:	f1 04       	cpc	r15, r1
    1764:	01 05       	cpc	r16, r1
    1766:	11 05       	cpc	r17, r1
    1768:	29 f0       	breq	.+10     	; 0x1774 <__mulsf3+0x1ce>
    176a:	40 5c       	subi	r20, 0xC0	; 192
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
    176e:	6f 4f       	sbci	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	40 78       	andi	r20, 0x80	; 128
    1774:	1a 8e       	std	Y+26, r1	; 0x1a
    1776:	fe 17       	cp	r31, r30
    1778:	11 f0       	breq	.+4      	; 0x177e <__mulsf3+0x1d8>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	8a 8f       	std	Y+26, r24	; 0x1a
    177e:	4d 8f       	std	Y+29, r20	; 0x1d
    1780:	5e 8f       	std	Y+30, r21	; 0x1e
    1782:	6f 8f       	std	Y+31, r22	; 0x1f
    1784:	78 a3       	std	Y+32, r23	; 0x20
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	89 8f       	std	Y+25, r24	; 0x19
    178a:	ce 01       	movw	r24, r28
    178c:	49 96       	adiw	r24, 0x19	; 25
    178e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    1792:	a0 96       	adiw	r28, 0x20	; 32
    1794:	e2 e1       	ldi	r30, 0x12	; 18
    1796:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__>

0000179a <__gtsf2>:
    179a:	a8 e1       	ldi	r26, 0x18	; 24
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e3 ed       	ldi	r30, 0xD3	; 211
    17a0:	fb e0       	ldi	r31, 0x0B	; 11
    17a2:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
    17a6:	69 83       	std	Y+1, r22	; 0x01
    17a8:	7a 83       	std	Y+2, r23	; 0x02
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	2d 83       	std	Y+5, r18	; 0x05
    17b0:	3e 83       	std	Y+6, r19	; 0x06
    17b2:	4f 83       	std	Y+7, r20	; 0x07
    17b4:	58 87       	std	Y+8, r21	; 0x08
    17b6:	89 e0       	ldi	r24, 0x09	; 9
    17b8:	e8 2e       	mov	r14, r24
    17ba:	f1 2c       	mov	r15, r1
    17bc:	ec 0e       	add	r14, r28
    17be:	fd 1e       	adc	r15, r29
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	b7 01       	movw	r22, r14
    17c6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    17ca:	8e 01       	movw	r16, r28
    17cc:	0f 5e       	subi	r16, 0xEF	; 239
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	ce 01       	movw	r24, r28
    17d2:	05 96       	adiw	r24, 0x05	; 5
    17d4:	b8 01       	movw	r22, r16
    17d6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	40 f0       	brcs	.+16     	; 0x17f0 <__gtsf2+0x56>
    17e0:	89 89       	ldd	r24, Y+17	; 0x11
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	28 f0       	brcs	.+10     	; 0x17f0 <__gtsf2+0x56>
    17e6:	c7 01       	movw	r24, r14
    17e8:	b8 01       	movw	r22, r16
    17ea:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fpcmp_parts_f>
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <__gtsf2+0x58>
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	68 96       	adiw	r28, 0x18	; 24
    17f4:	e6 e0       	ldi	r30, 0x06	; 6
    17f6:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

000017fa <__gesf2>:
    17fa:	a8 e1       	ldi	r26, 0x18	; 24
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e3 e0       	ldi	r30, 0x03	; 3
    1800:	fc e0       	ldi	r31, 0x0C	; 12
    1802:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
    1806:	69 83       	std	Y+1, r22	; 0x01
    1808:	7a 83       	std	Y+2, r23	; 0x02
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	2d 83       	std	Y+5, r18	; 0x05
    1810:	3e 83       	std	Y+6, r19	; 0x06
    1812:	4f 83       	std	Y+7, r20	; 0x07
    1814:	58 87       	std	Y+8, r21	; 0x08
    1816:	89 e0       	ldi	r24, 0x09	; 9
    1818:	e8 2e       	mov	r14, r24
    181a:	f1 2c       	mov	r15, r1
    181c:	ec 0e       	add	r14, r28
    181e:	fd 1e       	adc	r15, r29
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	b7 01       	movw	r22, r14
    1826:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    182a:	8e 01       	movw	r16, r28
    182c:	0f 5e       	subi	r16, 0xEF	; 239
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	ce 01       	movw	r24, r28
    1832:	05 96       	adiw	r24, 0x05	; 5
    1834:	b8 01       	movw	r22, r16
    1836:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	40 f0       	brcs	.+16     	; 0x1850 <__gesf2+0x56>
    1840:	89 89       	ldd	r24, Y+17	; 0x11
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	28 f0       	brcs	.+10     	; 0x1850 <__gesf2+0x56>
    1846:	c7 01       	movw	r24, r14
    1848:	b8 01       	movw	r22, r16
    184a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fpcmp_parts_f>
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <__gesf2+0x58>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	68 96       	adiw	r28, 0x18	; 24
    1854:	e6 e0       	ldi	r30, 0x06	; 6
    1856:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

0000185a <__ltsf2>:
    185a:	a8 e1       	ldi	r26, 0x18	; 24
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e3 e3       	ldi	r30, 0x33	; 51
    1860:	fc e0       	ldi	r31, 0x0C	; 12
    1862:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__prologue_saves__+0x18>
    1866:	69 83       	std	Y+1, r22	; 0x01
    1868:	7a 83       	std	Y+2, r23	; 0x02
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	2d 83       	std	Y+5, r18	; 0x05
    1870:	3e 83       	std	Y+6, r19	; 0x06
    1872:	4f 83       	std	Y+7, r20	; 0x07
    1874:	58 87       	std	Y+8, r21	; 0x08
    1876:	89 e0       	ldi	r24, 0x09	; 9
    1878:	e8 2e       	mov	r14, r24
    187a:	f1 2c       	mov	r15, r1
    187c:	ec 0e       	add	r14, r28
    187e:	fd 1e       	adc	r15, r29
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	b7 01       	movw	r22, r14
    1886:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    188a:	8e 01       	movw	r16, r28
    188c:	0f 5e       	subi	r16, 0xEF	; 239
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	ce 01       	movw	r24, r28
    1892:	05 96       	adiw	r24, 0x05	; 5
    1894:	b8 01       	movw	r22, r16
    1896:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	40 f0       	brcs	.+16     	; 0x18b0 <__ltsf2+0x56>
    18a0:	89 89       	ldd	r24, Y+17	; 0x11
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	28 f0       	brcs	.+10     	; 0x18b0 <__ltsf2+0x56>
    18a6:	c7 01       	movw	r24, r14
    18a8:	b8 01       	movw	r22, r16
    18aa:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fpcmp_parts_f>
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <__ltsf2+0x58>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	68 96       	adiw	r28, 0x18	; 24
    18b4:	e6 e0       	ldi	r30, 0x06	; 6
    18b6:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__epilogue_restores__+0x18>

000018ba <__floatsisf>:
    18ba:	a8 e0       	ldi	r26, 0x08	; 8
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e6       	ldi	r30, 0x63	; 99
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__prologue_saves__+0x12>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	da 01       	movw	r26, r20
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 27       	eor	r24, r24
    18d4:	b7 fd       	sbrc	r27, 7
    18d6:	83 95       	inc	r24
    18d8:	99 27       	eor	r25, r25
    18da:	aa 27       	eor	r26, r26
    18dc:	bb 27       	eor	r27, r27
    18de:	b8 2e       	mov	r11, r24
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 05       	cpc	r20, r1
    18e6:	51 05       	cpc	r21, r1
    18e8:	19 f4       	brne	.+6      	; 0x18f0 <__floatsisf+0x36>
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	3a c0       	rjmp	.+116    	; 0x1964 <__floatsisf+0xaa>
    18f0:	88 23       	and	r24, r24
    18f2:	a9 f0       	breq	.+42     	; 0x191e <__floatsisf+0x64>
    18f4:	20 30       	cpi	r18, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	38 07       	cpc	r19, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	48 07       	cpc	r20, r24
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	58 07       	cpc	r21, r24
    1902:	29 f4       	brne	.+10     	; 0x190e <__floatsisf+0x54>
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	9f ec       	ldi	r25, 0xCF	; 207
    190c:	30 c0       	rjmp	.+96     	; 0x196e <__floatsisf+0xb4>
    190e:	ee 24       	eor	r14, r14
    1910:	ff 24       	eor	r15, r15
    1912:	87 01       	movw	r16, r14
    1914:	e2 1a       	sub	r14, r18
    1916:	f3 0a       	sbc	r15, r19
    1918:	04 0b       	sbc	r16, r20
    191a:	15 0b       	sbc	r17, r21
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <__floatsisf+0x68>
    191e:	79 01       	movw	r14, r18
    1920:	8a 01       	movw	r16, r20
    1922:	8e e1       	ldi	r24, 0x1E	; 30
    1924:	c8 2e       	mov	r12, r24
    1926:	d1 2c       	mov	r13, r1
    1928:	dc 82       	std	Y+4, r13	; 0x04
    192a:	cb 82       	std	Y+3, r12	; 0x03
    192c:	ed 82       	std	Y+5, r14	; 0x05
    192e:	fe 82       	std	Y+6, r15	; 0x06
    1930:	0f 83       	std	Y+7, r16	; 0x07
    1932:	18 87       	std	Y+8, r17	; 0x08
    1934:	c8 01       	movw	r24, r16
    1936:	b7 01       	movw	r22, r14
    1938:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__clzsi2>
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	18 16       	cp	r1, r24
    1940:	19 06       	cpc	r1, r25
    1942:	84 f4       	brge	.+32     	; 0x1964 <__floatsisf+0xaa>
    1944:	08 2e       	mov	r0, r24
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <__floatsisf+0x96>
    1948:	ee 0c       	add	r14, r14
    194a:	ff 1c       	adc	r15, r15
    194c:	00 1f       	adc	r16, r16
    194e:	11 1f       	adc	r17, r17
    1950:	0a 94       	dec	r0
    1952:	d2 f7       	brpl	.-12     	; 0x1948 <__floatsisf+0x8e>
    1954:	ed 82       	std	Y+5, r14	; 0x05
    1956:	fe 82       	std	Y+6, r15	; 0x06
    1958:	0f 83       	std	Y+7, r16	; 0x07
    195a:	18 87       	std	Y+8, r17	; 0x08
    195c:	c8 1a       	sub	r12, r24
    195e:	d9 0a       	sbc	r13, r25
    1960:	dc 82       	std	Y+4, r13	; 0x04
    1962:	cb 82       	std	Y+3, r12	; 0x03
    1964:	ba 82       	std	Y+2, r11	; 0x02
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    196e:	28 96       	adiw	r28, 0x08	; 8
    1970:	e9 e0       	ldi	r30, 0x09	; 9
    1972:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__epilogue_restores__+0x12>

00001976 <__floatunsisf>:
    1976:	a8 e0       	ldi	r26, 0x08	; 8
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e1 ec       	ldi	r30, 0xC1	; 193
    197c:	fc e0       	ldi	r31, 0x0C	; 12
    197e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__prologue_saves__+0x10>
    1982:	7b 01       	movw	r14, r22
    1984:	8c 01       	movw	r16, r24
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	81 05       	cpc	r24, r1
    198c:	91 05       	cpc	r25, r1
    198e:	19 f4       	brne	.+6      	; 0x1996 <__floatunsisf+0x20>
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	60 c0       	rjmp	.+192    	; 0x1a56 <__floatunsisf+0xe0>
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	8e e1       	ldi	r24, 0x1E	; 30
    199c:	c8 2e       	mov	r12, r24
    199e:	d1 2c       	mov	r13, r1
    19a0:	dc 82       	std	Y+4, r13	; 0x04
    19a2:	cb 82       	std	Y+3, r12	; 0x03
    19a4:	ed 82       	std	Y+5, r14	; 0x05
    19a6:	fe 82       	std	Y+6, r15	; 0x06
    19a8:	0f 83       	std	Y+7, r16	; 0x07
    19aa:	18 87       	std	Y+8, r17	; 0x08
    19ac:	c8 01       	movw	r24, r16
    19ae:	b7 01       	movw	r22, r14
    19b0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__clzsi2>
    19b4:	fc 01       	movw	r30, r24
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	f7 ff       	sbrs	r31, 7
    19ba:	3b c0       	rjmp	.+118    	; 0x1a32 <__floatunsisf+0xbc>
    19bc:	22 27       	eor	r18, r18
    19be:	33 27       	eor	r19, r19
    19c0:	2e 1b       	sub	r18, r30
    19c2:	3f 0b       	sbc	r19, r31
    19c4:	57 01       	movw	r10, r14
    19c6:	68 01       	movw	r12, r16
    19c8:	02 2e       	mov	r0, r18
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <__floatunsisf+0x5e>
    19cc:	d6 94       	lsr	r13
    19ce:	c7 94       	ror	r12
    19d0:	b7 94       	ror	r11
    19d2:	a7 94       	ror	r10
    19d4:	0a 94       	dec	r0
    19d6:	d2 f7       	brpl	.-12     	; 0x19cc <__floatunsisf+0x56>
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a0 e0       	ldi	r26, 0x00	; 0
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <__floatunsisf+0x7c>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	2a 95       	dec	r18
    19f4:	d2 f7       	brpl	.-12     	; 0x19ea <__floatunsisf+0x74>
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	a1 09       	sbc	r26, r1
    19fa:	b1 09       	sbc	r27, r1
    19fc:	8e 21       	and	r24, r14
    19fe:	9f 21       	and	r25, r15
    1a00:	a0 23       	and	r26, r16
    1a02:	b1 23       	and	r27, r17
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	a1 05       	cpc	r26, r1
    1a08:	b1 05       	cpc	r27, r1
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <__floatunsisf+0x9e>
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	4a 29       	or	r20, r10
    1a16:	5b 29       	or	r21, r11
    1a18:	6c 29       	or	r22, r12
    1a1a:	7d 29       	or	r23, r13
    1a1c:	4d 83       	std	Y+5, r20	; 0x05
    1a1e:	5e 83       	std	Y+6, r21	; 0x06
    1a20:	6f 83       	std	Y+7, r22	; 0x07
    1a22:	78 87       	std	Y+8, r23	; 0x08
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	8e 1b       	sub	r24, r30
    1a2a:	9f 0b       	sbc	r25, r31
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
    1a30:	12 c0       	rjmp	.+36     	; 0x1a56 <__floatunsisf+0xe0>
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	81 f0       	breq	.+32     	; 0x1a56 <__floatunsisf+0xe0>
    1a36:	0e 2e       	mov	r0, r30
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__floatunsisf+0xcc>
    1a3a:	ee 0c       	add	r14, r14
    1a3c:	ff 1c       	adc	r15, r15
    1a3e:	00 1f       	adc	r16, r16
    1a40:	11 1f       	adc	r17, r17
    1a42:	0a 94       	dec	r0
    1a44:	d2 f7       	brpl	.-12     	; 0x1a3a <__floatunsisf+0xc4>
    1a46:	ed 82       	std	Y+5, r14	; 0x05
    1a48:	fe 82       	std	Y+6, r15	; 0x06
    1a4a:	0f 83       	std	Y+7, r16	; 0x07
    1a4c:	18 87       	std	Y+8, r17	; 0x08
    1a4e:	ce 1a       	sub	r12, r30
    1a50:	df 0a       	sbc	r13, r31
    1a52:	dc 82       	std	Y+4, r13	; 0x04
    1a54:	cb 82       	std	Y+3, r12	; 0x03
    1a56:	1a 82       	std	Y+2, r1	; 0x02
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    1a60:	28 96       	adiw	r28, 0x08	; 8
    1a62:	ea e0       	ldi	r30, 0x0A	; 10
    1a64:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__epilogue_restores__+0x10>

00001a68 <__clzsi2>:
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	7b 01       	movw	r14, r22
    1a72:	8c 01       	movw	r16, r24
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	e8 16       	cp	r14, r24
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	f8 06       	cpc	r15, r24
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 07       	cpc	r16, r24
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	18 07       	cpc	r17, r24
    1a84:	88 f4       	brcc	.+34     	; 0x1aa8 <__clzsi2+0x40>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	e8 16       	cp	r14, r24
    1a8a:	f1 04       	cpc	r15, r1
    1a8c:	01 05       	cpc	r16, r1
    1a8e:	11 05       	cpc	r17, r1
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <__clzsi2+0x36>
    1a92:	28 f0       	brcs	.+10     	; 0x1a9e <__clzsi2+0x36>
    1a94:	88 e0       	ldi	r24, 0x08	; 8
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	17 c0       	rjmp	.+46     	; 0x1acc <__clzsi2+0x64>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e0       	ldi	r26, 0x00	; 0
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	12 c0       	rjmp	.+36     	; 0x1acc <__clzsi2+0x64>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	e8 16       	cp	r14, r24
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	f8 06       	cpc	r15, r24
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 07       	cpc	r16, r24
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	18 07       	cpc	r17, r24
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <__clzsi2+0x5c>
    1aba:	88 e1       	ldi	r24, 0x18	; 24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <__clzsi2+0x64>
    1ac4:	80 e1       	ldi	r24, 0x10	; 16
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e0       	ldi	r26, 0x00	; 0
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	20 e2       	ldi	r18, 0x20	; 32
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	28 1b       	sub	r18, r24
    1ad6:	39 0b       	sbc	r19, r25
    1ad8:	4a 0b       	sbc	r20, r26
    1ada:	5b 0b       	sbc	r21, r27
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <__clzsi2+0x7e>
    1ade:	16 95       	lsr	r17
    1ae0:	07 95       	ror	r16
    1ae2:	f7 94       	ror	r15
    1ae4:	e7 94       	ror	r14
    1ae6:	8a 95       	dec	r24
    1ae8:	d2 f7       	brpl	.-12     	; 0x1ade <__clzsi2+0x76>
    1aea:	f7 01       	movw	r30, r14
    1aec:	e7 5d       	subi	r30, 0xD7	; 215
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	28 1b       	sub	r18, r24
    1af4:	31 09       	sbc	r19, r1
    1af6:	41 09       	sbc	r20, r1
    1af8:	51 09       	sbc	r21, r1
    1afa:	c9 01       	movw	r24, r18
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <__pack_f>:
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	fc 01       	movw	r30, r24
    1b12:	e4 80       	ldd	r14, Z+4	; 0x04
    1b14:	f5 80       	ldd	r15, Z+5	; 0x05
    1b16:	06 81       	ldd	r16, Z+6	; 0x06
    1b18:	17 81       	ldd	r17, Z+7	; 0x07
    1b1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	48 f4       	brcc	.+18     	; 0x1b34 <__pack_f+0x2e>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e1       	ldi	r26, 0x10	; 16
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 2a       	or	r14, r24
    1b2c:	f9 2a       	or	r15, r25
    1b2e:	0a 2b       	or	r16, r26
    1b30:	1b 2b       	or	r17, r27
    1b32:	a5 c0       	rjmp	.+330    	; 0x1c7e <__pack_f+0x178>
    1b34:	84 30       	cpi	r24, 0x04	; 4
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__pack_f+0x34>
    1b38:	9f c0       	rjmp	.+318    	; 0x1c78 <__pack_f+0x172>
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <__pack_f+0x40>
    1b3e:	ee 24       	eor	r14, r14
    1b40:	ff 24       	eor	r15, r15
    1b42:	87 01       	movw	r16, r14
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <__pack_f+0x4a>
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	01 05       	cpc	r16, r1
    1b4c:	11 05       	cpc	r17, r1
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <__pack_f+0x50>
    1b50:	e0 e0       	ldi	r30, 0x00	; 0
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	96 c0       	rjmp	.+300    	; 0x1c82 <__pack_f+0x17c>
    1b56:	62 81       	ldd	r22, Z+2	; 0x02
    1b58:	73 81       	ldd	r23, Z+3	; 0x03
    1b5a:	9f ef       	ldi	r25, 0xFF	; 255
    1b5c:	62 38       	cpi	r22, 0x82	; 130
    1b5e:	79 07       	cpc	r23, r25
    1b60:	0c f0       	brlt	.+2      	; 0x1b64 <__pack_f+0x5e>
    1b62:	5b c0       	rjmp	.+182    	; 0x1c1a <__pack_f+0x114>
    1b64:	22 e8       	ldi	r18, 0x82	; 130
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	26 1b       	sub	r18, r22
    1b6a:	37 0b       	sbc	r19, r23
    1b6c:	2a 31       	cpi	r18, 0x1A	; 26
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f0       	brlt	.+10     	; 0x1b7c <__pack_f+0x76>
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	2a c0       	rjmp	.+84     	; 0x1bd0 <__pack_f+0xca>
    1b7c:	b8 01       	movw	r22, r16
    1b7e:	a7 01       	movw	r20, r14
    1b80:	02 2e       	mov	r0, r18
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__pack_f+0x86>
    1b84:	76 95       	lsr	r23
    1b86:	67 95       	ror	r22
    1b88:	57 95       	ror	r21
    1b8a:	47 95       	ror	r20
    1b8c:	0a 94       	dec	r0
    1b8e:	d2 f7       	brpl	.-12     	; 0x1b84 <__pack_f+0x7e>
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e0       	ldi	r26, 0x00	; 0
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__pack_f+0x9c>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	2a 95       	dec	r18
    1ba4:	d2 f7       	brpl	.-12     	; 0x1b9a <__pack_f+0x94>
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	a1 09       	sbc	r26, r1
    1baa:	b1 09       	sbc	r27, r1
    1bac:	8e 21       	and	r24, r14
    1bae:	9f 21       	and	r25, r15
    1bb0:	a0 23       	and	r26, r16
    1bb2:	b1 23       	and	r27, r17
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	a1 05       	cpc	r26, r1
    1bb8:	b1 05       	cpc	r27, r1
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <__pack_f+0xbe>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	9a 01       	movw	r18, r20
    1bc6:	ab 01       	movw	r20, r22
    1bc8:	28 2b       	or	r18, r24
    1bca:	39 2b       	or	r19, r25
    1bcc:	4a 2b       	or	r20, r26
    1bce:	5b 2b       	or	r21, r27
    1bd0:	da 01       	movw	r26, r20
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	90 70       	andi	r25, 0x00	; 0
    1bd8:	a0 70       	andi	r26, 0x00	; 0
    1bda:	b0 70       	andi	r27, 0x00	; 0
    1bdc:	80 34       	cpi	r24, 0x40	; 64
    1bde:	91 05       	cpc	r25, r1
    1be0:	a1 05       	cpc	r26, r1
    1be2:	b1 05       	cpc	r27, r1
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__pack_f+0xee>
    1be6:	27 ff       	sbrs	r18, 7
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <__pack_f+0xf6>
    1bea:	20 5c       	subi	r18, 0xC0	; 192
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <__pack_f+0xf6>
    1bf4:	21 5c       	subi	r18, 0xC1	; 193
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	e0 e0       	ldi	r30, 0x00	; 0
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	20 30       	cpi	r18, 0x00	; 0
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	3a 07       	cpc	r19, r26
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	4a 07       	cpc	r20, r26
    1c0a:	a0 e4       	ldi	r26, 0x40	; 64
    1c0c:	5a 07       	cpc	r21, r26
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <__pack_f+0x10e>
    1c10:	e1 e0       	ldi	r30, 0x01	; 1
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	79 01       	movw	r14, r18
    1c16:	8a 01       	movw	r16, r20
    1c18:	27 c0       	rjmp	.+78     	; 0x1c68 <__pack_f+0x162>
    1c1a:	60 38       	cpi	r22, 0x80	; 128
    1c1c:	71 05       	cpc	r23, r1
    1c1e:	64 f5       	brge	.+88     	; 0x1c78 <__pack_f+0x172>
    1c20:	fb 01       	movw	r30, r22
    1c22:	e1 58       	subi	r30, 0x81	; 129
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	d8 01       	movw	r26, r16
    1c28:	c7 01       	movw	r24, r14
    1c2a:	8f 77       	andi	r24, 0x7F	; 127
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	a0 70       	andi	r26, 0x00	; 0
    1c30:	b0 70       	andi	r27, 0x00	; 0
    1c32:	80 34       	cpi	r24, 0x40	; 64
    1c34:	91 05       	cpc	r25, r1
    1c36:	a1 05       	cpc	r26, r1
    1c38:	b1 05       	cpc	r27, r1
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <__pack_f+0x144>
    1c3c:	e7 fe       	sbrs	r14, 7
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <__pack_f+0x154>
    1c40:	80 e4       	ldi	r24, 0x40	; 64
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <__pack_f+0x14c>
    1c4a:	8f e3       	ldi	r24, 0x3F	; 63
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e8 0e       	add	r14, r24
    1c54:	f9 1e       	adc	r15, r25
    1c56:	0a 1f       	adc	r16, r26
    1c58:	1b 1f       	adc	r17, r27
    1c5a:	17 ff       	sbrs	r17, 7
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__pack_f+0x162>
    1c5e:	16 95       	lsr	r17
    1c60:	07 95       	ror	r16
    1c62:	f7 94       	ror	r15
    1c64:	e7 94       	ror	r14
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	87 e0       	ldi	r24, 0x07	; 7
    1c6a:	16 95       	lsr	r17
    1c6c:	07 95       	ror	r16
    1c6e:	f7 94       	ror	r15
    1c70:	e7 94       	ror	r14
    1c72:	8a 95       	dec	r24
    1c74:	d1 f7       	brne	.-12     	; 0x1c6a <__pack_f+0x164>
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__pack_f+0x17c>
    1c78:	ee 24       	eor	r14, r14
    1c7a:	ff 24       	eor	r15, r15
    1c7c:	87 01       	movw	r16, r14
    1c7e:	ef ef       	ldi	r30, 0xFF	; 255
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	6e 2f       	mov	r22, r30
    1c84:	67 95       	ror	r22
    1c86:	66 27       	eor	r22, r22
    1c88:	67 95       	ror	r22
    1c8a:	90 2f       	mov	r25, r16
    1c8c:	9f 77       	andi	r25, 0x7F	; 127
    1c8e:	d7 94       	ror	r13
    1c90:	dd 24       	eor	r13, r13
    1c92:	d7 94       	ror	r13
    1c94:	8e 2f       	mov	r24, r30
    1c96:	86 95       	lsr	r24
    1c98:	49 2f       	mov	r20, r25
    1c9a:	46 2b       	or	r20, r22
    1c9c:	58 2f       	mov	r21, r24
    1c9e:	5d 29       	or	r21, r13
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	08 95       	ret

00001cb0 <__unpack_f>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	db 01       	movw	r26, r22
    1cb4:	40 81       	ld	r20, Z
    1cb6:	51 81       	ldd	r21, Z+1	; 0x01
    1cb8:	22 81       	ldd	r18, Z+2	; 0x02
    1cba:	62 2f       	mov	r22, r18
    1cbc:	6f 77       	andi	r22, 0x7F	; 127
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	22 1f       	adc	r18, r18
    1cc2:	22 27       	eor	r18, r18
    1cc4:	22 1f       	adc	r18, r18
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	89 2f       	mov	r24, r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	82 2b       	or	r24, r18
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	99 27       	eor	r25, r25
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 93       	st	X, r25
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	21 15       	cp	r18, r1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	a9 f5       	brne	.+106    	; 0x1d4e <__unpack_f+0x9e>
    1ce4:	41 15       	cp	r20, r1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	61 05       	cpc	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <__unpack_f+0x42>
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	37 c0       	rjmp	.+110    	; 0x1d60 <__unpack_f+0xb0>
    1cf2:	82 e8       	ldi	r24, 0x82	; 130
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	13 96       	adiw	r26, 0x03	; 3
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
    1cfc:	12 97       	sbiw	r26, 0x02	; 2
    1cfe:	9a 01       	movw	r18, r20
    1d00:	ab 01       	movw	r20, r22
    1d02:	67 e0       	ldi	r22, 0x07	; 7
    1d04:	22 0f       	add	r18, r18
    1d06:	33 1f       	adc	r19, r19
    1d08:	44 1f       	adc	r20, r20
    1d0a:	55 1f       	adc	r21, r21
    1d0c:	6a 95       	dec	r22
    1d0e:	d1 f7       	brne	.-12     	; 0x1d04 <__unpack_f+0x54>
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	8c 93       	st	X, r24
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <__unpack_f+0x80>
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	44 1f       	adc	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	8d 91       	ld	r24, X+
    1d22:	9c 91       	ld	r25, X
    1d24:	13 97       	sbiw	r26, 0x03	; 3
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	13 96       	adiw	r26, 0x03	; 3
    1d2a:	9c 93       	st	X, r25
    1d2c:	8e 93       	st	-X, r24
    1d2e:	12 97       	sbiw	r26, 0x02	; 2
    1d30:	20 30       	cpi	r18, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	38 07       	cpc	r19, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	48 07       	cpc	r20, r24
    1d3a:	80 e4       	ldi	r24, 0x40	; 64
    1d3c:	58 07       	cpc	r21, r24
    1d3e:	58 f3       	brcs	.-42     	; 0x1d16 <__unpack_f+0x66>
    1d40:	14 96       	adiw	r26, 0x04	; 4
    1d42:	2d 93       	st	X+, r18
    1d44:	3d 93       	st	X+, r19
    1d46:	4d 93       	st	X+, r20
    1d48:	5c 93       	st	X, r21
    1d4a:	17 97       	sbiw	r26, 0x07	; 7
    1d4c:	08 95       	ret
    1d4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d50:	31 05       	cpc	r19, r1
    1d52:	79 f4       	brne	.+30     	; 0x1d72 <__unpack_f+0xc2>
    1d54:	41 15       	cp	r20, r1
    1d56:	51 05       	cpc	r21, r1
    1d58:	61 05       	cpc	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <__unpack_f+0xb4>
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	08 95       	ret
    1d64:	64 ff       	sbrs	r22, 4
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <__unpack_f+0xbe>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	8c 93       	st	X, r24
    1d6c:	12 c0       	rjmp	.+36     	; 0x1d92 <__unpack_f+0xe2>
    1d6e:	1c 92       	st	X, r1
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <__unpack_f+0xe2>
    1d72:	2f 57       	subi	r18, 0x7F	; 127
    1d74:	30 40       	sbci	r19, 0x00	; 0
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	3c 93       	st	X, r19
    1d7a:	2e 93       	st	-X, r18
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	8c 93       	st	X, r24
    1d82:	87 e0       	ldi	r24, 0x07	; 7
    1d84:	44 0f       	add	r20, r20
    1d86:	55 1f       	adc	r21, r21
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	8a 95       	dec	r24
    1d8e:	d1 f7       	brne	.-12     	; 0x1d84 <__unpack_f+0xd4>
    1d90:	70 64       	ori	r23, 0x40	; 64
    1d92:	14 96       	adiw	r26, 0x04	; 4
    1d94:	4d 93       	st	X+, r20
    1d96:	5d 93       	st	X+, r21
    1d98:	6d 93       	st	X+, r22
    1d9a:	7c 93       	st	X, r23
    1d9c:	17 97       	sbiw	r26, 0x07	; 7
    1d9e:	08 95       	ret

00001da0 <__fpcmp_parts_f>:
    1da0:	1f 93       	push	r17
    1da2:	dc 01       	movw	r26, r24
    1da4:	fb 01       	movw	r30, r22
    1da6:	9c 91       	ld	r25, X
    1da8:	92 30       	cpi	r25, 0x02	; 2
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <__fpcmp_parts_f+0xe>
    1dac:	47 c0       	rjmp	.+142    	; 0x1e3c <__fpcmp_parts_f+0x9c>
    1dae:	80 81       	ld	r24, Z
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	08 f4       	brcc	.+2      	; 0x1db6 <__fpcmp_parts_f+0x16>
    1db4:	43 c0       	rjmp	.+134    	; 0x1e3c <__fpcmp_parts_f+0x9c>
    1db6:	94 30       	cpi	r25, 0x04	; 4
    1db8:	51 f4       	brne	.+20     	; 0x1dce <__fpcmp_parts_f+0x2e>
    1dba:	11 96       	adiw	r26, 0x01	; 1
    1dbc:	1c 91       	ld	r17, X
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	99 f5       	brne	.+102    	; 0x1e28 <__fpcmp_parts_f+0x88>
    1dc2:	81 81       	ldd	r24, Z+1	; 0x01
    1dc4:	68 2f       	mov	r22, r24
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	61 1b       	sub	r22, r17
    1dca:	71 09       	sbc	r23, r1
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <__fpcmp_parts_f+0xac>
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	21 f0       	breq	.+8      	; 0x1dda <__fpcmp_parts_f+0x3a>
    1dd2:	92 30       	cpi	r25, 0x02	; 2
    1dd4:	31 f4       	brne	.+12     	; 0x1de2 <__fpcmp_parts_f+0x42>
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	b9 f1       	breq	.+110    	; 0x1e48 <__fpcmp_parts_f+0xa8>
    1dda:	81 81       	ldd	r24, Z+1	; 0x01
    1ddc:	88 23       	and	r24, r24
    1dde:	89 f1       	breq	.+98     	; 0x1e42 <__fpcmp_parts_f+0xa2>
    1de0:	2d c0       	rjmp	.+90     	; 0x1e3c <__fpcmp_parts_f+0x9c>
    1de2:	11 96       	adiw	r26, 0x01	; 1
    1de4:	1c 91       	ld	r17, X
    1de6:	11 97       	sbiw	r26, 0x01	; 1
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	f1 f0       	breq	.+60     	; 0x1e28 <__fpcmp_parts_f+0x88>
    1dec:	81 81       	ldd	r24, Z+1	; 0x01
    1dee:	18 17       	cp	r17, r24
    1df0:	d9 f4       	brne	.+54     	; 0x1e28 <__fpcmp_parts_f+0x88>
    1df2:	12 96       	adiw	r26, 0x02	; 2
    1df4:	2d 91       	ld	r18, X+
    1df6:	3c 91       	ld	r19, X
    1df8:	13 97       	sbiw	r26, 0x03	; 3
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	82 17       	cp	r24, r18
    1e00:	93 07       	cpc	r25, r19
    1e02:	94 f0       	brlt	.+36     	; 0x1e28 <__fpcmp_parts_f+0x88>
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	bc f0       	brlt	.+46     	; 0x1e38 <__fpcmp_parts_f+0x98>
    1e0a:	14 96       	adiw	r26, 0x04	; 4
    1e0c:	8d 91       	ld	r24, X+
    1e0e:	9d 91       	ld	r25, X+
    1e10:	0d 90       	ld	r0, X+
    1e12:	bc 91       	ld	r27, X
    1e14:	a0 2d       	mov	r26, r0
    1e16:	24 81       	ldd	r18, Z+4	; 0x04
    1e18:	35 81       	ldd	r19, Z+5	; 0x05
    1e1a:	46 81       	ldd	r20, Z+6	; 0x06
    1e1c:	57 81       	ldd	r21, Z+7	; 0x07
    1e1e:	28 17       	cp	r18, r24
    1e20:	39 07       	cpc	r19, r25
    1e22:	4a 07       	cpc	r20, r26
    1e24:	5b 07       	cpc	r21, r27
    1e26:	18 f4       	brcc	.+6      	; 0x1e2e <__fpcmp_parts_f+0x8e>
    1e28:	11 23       	and	r17, r17
    1e2a:	41 f0       	breq	.+16     	; 0x1e3c <__fpcmp_parts_f+0x9c>
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <__fpcmp_parts_f+0xa2>
    1e2e:	82 17       	cp	r24, r18
    1e30:	93 07       	cpc	r25, r19
    1e32:	a4 07       	cpc	r26, r20
    1e34:	b5 07       	cpc	r27, r21
    1e36:	40 f4       	brcc	.+16     	; 0x1e48 <__fpcmp_parts_f+0xa8>
    1e38:	11 23       	and	r17, r17
    1e3a:	19 f0       	breq	.+6      	; 0x1e42 <__fpcmp_parts_f+0xa2>
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <__fpcmp_parts_f+0xac>
    1e42:	6f ef       	ldi	r22, 0xFF	; 255
    1e44:	7f ef       	ldi	r23, 0xFF	; 255
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <__fpcmp_parts_f+0xac>
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	1f 91       	pop	r17
    1e50:	08 95       	ret

00001e52 <__prologue_saves__>:
    1e52:	2f 92       	push	r2
    1e54:	3f 92       	push	r3
    1e56:	4f 92       	push	r4
    1e58:	5f 92       	push	r5
    1e5a:	6f 92       	push	r6
    1e5c:	7f 92       	push	r7
    1e5e:	8f 92       	push	r8
    1e60:	9f 92       	push	r9
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	ca 1b       	sub	r28, r26
    1e7c:	db 0b       	sbc	r29, r27
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	09 94       	ijmp

00001e8a <__epilogue_restores__>:
    1e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8c:	39 88       	ldd	r3, Y+17	; 0x11
    1e8e:	48 88       	ldd	r4, Y+16	; 0x10
    1e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea0:	df 80       	ldd	r13, Y+7	; 0x07
    1ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    1eac:	b9 81       	ldd	r27, Y+1	; 0x01
    1eae:	ce 0f       	add	r28, r30
    1eb0:	d1 1d       	adc	r29, r1
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	ed 01       	movw	r28, r26
    1ebe:	08 95       	ret

00001ec0 <_exit>:
    1ec0:	f8 94       	cli

00001ec2 <__stop_program>:
    1ec2:	ff cf       	rjmp	.-2      	; 0x1ec2 <__stop_program>
